---
title: "Tiered Bayesian Risk Assessment of Estrogen Mixtures"
output: html_notebook
---


```{r packages, warning=FALSE}
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
library(TTR)
library(forecast)
```


# Input

```{r data_input, warning=FALSE}
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")

# Immediately shortlist to interesting APIs to save time later
Interesting_APIs <- c("estradiol", "etinylestradiol", "levonorgestrel", "diclofenac", 
                      "ibuprofen", "paracetamol", "ciprofloxacin", "amoxicillin")

NIPH_Sales_Weights <- NIPH_Sales_Weights %>% filter(API_Name %in% Interesting_APIs)

# To calculate historic PECs, we'll need historic population and WW production figures

# mainland Norwegian population on 1 Jan per year 1951 - 2021
# accessed from https://data.ssb.no/api/v0/en/table/06913/
# 15:57 12/05/2021

Norway_Population_Year <- read_xlsx(path = "Data/Statistics_Norway/Pop_1951_2021.xlsx",
                                    range = "B4:C74",
                                    col_names = c("Year", "Population")) %>% 
  mutate(Year = as.numeric(Year))

# wastewater consumption per person per day in Norway 2015 - 2020 (SSB)
# accessed from https://data.ssb.no/api/v0/en/table/11787/
# 14:49 12/05/2021

Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
                                    range = "B4:G5") %>% 
  # Pivot into long data
  pivot_longer(cols = 1:6,
               names_to = "Year",
               values_to = "L_per_person_per_day") %>% 
  # Make sure Year is numeric so it doesn't break everything
  mutate(Year = as.numeric(Year)) %>% 
# Obviously this doesn't go back far enough, so we'll backfill it to 1999 with fake data
  add_row(Year = 1999:2014, L_per_person_per_day = 180)
  
```

## PEC Function

```{r PEC_function}

# A function to calculate PECs for 2015 - 2020 using the standard EMA ERA equation
# This function now takes a year as argument, and references the 
# wastewater per person per day and Norway population from separate SSB tibbles

calculate_conv_PEC_gL <- function(g_sold,
                                  year_sold,
                                  WWTP_removal = 0, 
                                  metabolic_removal = 0, 
                                  dilution_factor = 10)
{
   
# Match year against wastewater_per_person_per_day, save internally
  wastewater_per_person_per_day <- Norway_Wastewater_Year %>% 
    filter(Year == year_sold) %>% 
    pull(L_per_person_per_day)
  
# Match year against norway_population, save internally
  norway_population <- Norway_Population_Year %>% 
    filter(Year == year_sold) %>% 
    pull(Population)

  conv_PEC_SW_gL = (
    g_sold * (1 - WWTP_removal / 100) * (1 - metabolic_removal / 100)) /
    (365 * norway_population * wastewater_per_person_per_day * dilution_factor) 
  return(conv_PEC_SW_gL)
}

# At some point it became necessary to vectorise this function, to stop it
# taking the whole year_sold vector. I don't understand why, and it now
# Takes twice as long to run. But it does run!
calculate_conv_PEC_gL <- Vectorize(calculate_conv_PEC_gL)
```


# Dataset Summary

```{r add_APIs}
NIPH_Sales_Weights_Summed <- NIPH_Sales_Weights %>% 
  group_by(API_Name, sYear) %>% 
  summarise(Total_Sold_g = sum(API_AmountSoldValue, na.rm = TRUE))

ggplot(data = NIPH_Sales_Weights_Summed, 
       mapping = aes(x = sYear, y = Total_Sold_g, colour = API_Name)) +
  geom_line() +
  scale_y_continuous(trans = "log10")
```

```{r forecasting_sales}
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>% 
  filter(API_Name == "paracetamol", sYear != 2019) %>% 
  ungroup() %>% 
  dplyr::select(-API_Name, -sYear)


NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
                            start = 1999,
                            end =  2019,
                            frequency = 1)

plot.ts(NIPH_Sales_Weights_ts)

# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)

NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
                                              beta = FALSE,
                                              gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)

# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
```
