mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_WWT_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Current", "2+", "3", "Best")) +
labs(x = "WWT Scenario (2050)")
WWTP_RQ_bars
# WWTP_RQ_bars_allAPI <- Hugin_Data_Output_Tall %>%
#     filter(master_pop_scenario == "Main",
#            master_year == 2020,
#            master_county %in% c("Total"),
#            Risk_Bin %notin% c("true", "false")) %>%
#     ggplot(aes(x = master_WWT_scenario, y = Probability, fill = Risk_Bin)) +
#     geom_col(position = "stack") +
#     scale_fill_viridis_d("RQ Bin") +
#     facet_grid(cols = vars(API_Name)) +
#     scale_x_discrete(limits = c("Current", "Compliance", "Upgrade")) +
#     labs(x = "WWT Scenario")
#
# WWTP_RQ_bars_allAPI
WWTP_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_pop_scenario == "Main",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_WWT_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Current", "2+", "3", "Best")) +
labs(x = "WWT Scenario (2050)")
WWTP_RQ_bars
# WWTP_RQ_bars_allAPI <- Hugin_Data_Output_Tall %>%
#     filter(master_pop_scenario == "Main",
#            master_year == 2020,
#            master_county %in% c("Total"),
#            Risk_Bin %notin% c("true", "false")) %>%
#     ggplot(aes(x = master_WWT_scenario, y = Probability, fill = Risk_Bin)) +
#     geom_col(position = "stack") +
#     scale_fill_viridis_d("RQ Bin") +
#     facet_grid(cols = vars(API_Name)) +
#     scale_x_discrete(limits = c("Current", "Compliance", "Upgrade")) +
#     labs(x = "WWT Scenario")
#
# WWTP_RQ_bars_allAPI
str_to_title(pull(LMs_API[1]))
API_labeller <- str_to_title(pull(LMs_API[1]))
names(API_labeller) <- API_labeller
API_labeller <- c(API_labeller, AllAPI = "All APIs")
county_labels <- as_labeller(c(Viken = "Viken (Urban)",
Nordland = "Nordland (Rural)",
Oslo = "Oslo (Urban)",
`Whole Country` = "Whole Country",
API_labeller))
WWTP_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_pop_scenario == "Main",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_WWT_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Current", "2+", "3", "Best")) +
labs(x = "WWT Scenario (2050)")
WWTP_RQ_bars
# WWTP_RQ_bars_allAPI <- Hugin_Data_Output_Tall %>%
#     filter(master_pop_scenario == "Main",
#            master_year == 2020,
#            master_county %in% c("Total"),
#            Risk_Bin %notin% c("true", "false")) %>%
#     ggplot(aes(x = master_WWT_scenario, y = Probability, fill = Risk_Bin)) +
#     geom_col(position = "stack") +
#     scale_fill_viridis_d("RQ Bin") +
#     facet_grid(cols = vars(API_Name)) +
#     scale_x_discrete(limits = c("Current", "Compliance", "Upgrade")) +
#     labs(x = "WWT Scenario")
#
# WWTP_RQ_bars_allAPI
source(file = "src/graphics/pop_scen_RQ_bars.R")
pop_scen_RQ_bars
ggsave(filename = "output/images/ready/figure06_pop_scenario_RQ.png", device = "png",
width = 20, height = 10, units = "cm")
pop_scen_RQ_bars
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Ethinylestradiol", "Total")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Ethinylestradiol", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars
combined_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_pop_scenario == "Main",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %notin% c("Estrogens", "Antibiotics","Painkillers")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = fct_inorder(master_WWT_scenario), y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", option = viridis_colour, direction = -1) +
facet_grid(rows = vars(master_county),
cols = vars(API_Name),
labeller = county_labels) +
scale_x_discrete() +
labs(x = "WWT Scenario (2050)") +
theme(axis.text.x = element_text(angle = 90, vjust = -0.0001))
combined_RQ_bars
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = as.ordered(master_WWT_scenario)) %>%
select(-c(6:11))
Hugin_Data_Output$master_WWT_scenario
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario), c("Current", "2+", "3", "Best")) %>%
select(-c(6:11))
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario), c("Current", "2+", "3", "Best"))
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario, c("Current", "2+", "3", "Best"))) %>%
select(-c(6:11))
# Note the threshold used
Hugin_Threshhold <-  unique(Hugin_Data_Output$master_RQ_threshold)
# Hugin's many output interval columns need pivoting to tall data
Hugin_Data_Output_Tall <- Hugin_Data_Output %>%
pivot_longer(cols = 6:73,
names_to = "Risk_Bin_String",
values_to = "Probability") %>%
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = str_extract(Risk_Bin_String, pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"),
Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+")) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
# When was the dataset last updated?
Hugin_Output_Last_Updated <- file.info("Data/Hugin/Hugin_to_R_datafile.csv")$mtime
source(file = "src/graphics/combined_risk_bar.R")
combined_RQ_bars
combined_RQ_bars
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario, c("Current", "2+", "3", "Best")),
API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol", "AllAPI")))) %>%
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario, c("Current", "2+", "3", "Best")),
API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol", "AllAPI"))) %>%
select(-c(6:11))
Hugin_Data_Output
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario, c("Current", "2+", "3", "Best"))) %>%
select(-c(6:11))
# Note the threshold used
Hugin_Threshhold <-  unique(Hugin_Data_Output$master_RQ_threshold)
# Hugin's many output interval columns need pivoting to tall data
Hugin_Data_Output_Tall <- Hugin_Data_Output %>%
pivot_longer(cols = 6:73,
names_to = "Risk_Bin_String",
values_to = "Probability") %>%
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = str_extract(Risk_Bin_String, pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"),
Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+"),
API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol", "AllAPI"))) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
# When was the dataset last updated?
Hugin_Output_Last_Updated <- file.info("Data/Hugin/Hugin_to_R_datafile.csv")$mtime
View(Hugin_Data_Output_Tall)
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_to_R_datafile.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(master_pop_scenario = fct_relevel(master_pop_scenario, c("Low", "Main", "High")),
master_WWT_scenario = fct_relevel(master_WWT_scenario, c("Current", "2+", "3", "Best"))) %>%
select(-c(6:11))
# Note the threshold used
Hugin_Threshhold <-  unique(Hugin_Data_Output$master_RQ_threshold)
# Hugin's many output interval columns need pivoting to tall data
Hugin_Data_Output_Tall <- Hugin_Data_Output %>%
pivot_longer(cols = 6:73,
names_to = "Risk_Bin_String",
values_to = "Probability") %>%
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = str_extract(Risk_Bin_String, pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"),
Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+"),
API_Name = fct_relevel(API_Name, c("Estradiol", "Ethinylestradiol", "Ciprofloxacin",
"Diclofenac", "Ibuprofen", "Paracetamol",
"Estrogens", "Antibiotics", "Painkillers", "AllAPI"))) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
# When was the dataset last updated?
Hugin_Output_Last_Updated <- file.info("Data/Hugin/Hugin_to_R_datafile.csv")$mtime
source(file = "src/graphics/combined_risk_bar.R")
combined_RQ_bars
wwt_share_by_county_2020
View(wwtp_by_county_2020)
View(wwt_share_by_county_2020)
wwt_share_by_county_2020 %>% filter(County_Name == "Total")
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total")
View(wwt_share_total_by_scenario)
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3"))
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
select(-County_Code, -Population)
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
select(-County_Code, -population) %>%
crossing(Scenario = c("2+", "3"))
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total")wwt_share_by_county_2020
wwt_share_by_county_2020
wwt_share_total_by_scenario$wwt_pop_share
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
select(-County_Code, -population) %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario)
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
# Make a map of Norway with pie charts per fylke depicting access to various WWTP levels
# I'd love to do this automatically, but scatterpie is too primitive and I'm strapped for time
Norway_county_map_WWT_data <- Norway_county_map_names %>%
left_join(wwt_share_by_county_2020, by = c("County_Name"))
Norway_county_WWT_map <- ggplot(data = Norway_county_map_WWT_data, mapping = aes(x = long,
y = lat)) +
geom_polygon(fill = "lightgrey",
colour = "white",
size = 0.5,
aes(group = group)) +
theme_void() +
coord_fixed()
Norway_county_WWT_map
# Pie charts
# Generate some additional scenario pies for the whole country
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario)
# By hand is faster than figuring out how to write the code
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario),
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
Norway_county_pies_WWT
API_removal_rates_bars <- API_removal_rates %>%
mutate(API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin", "diclofenac",
"ibuprofen", "paracetamol", "mean"))) %>%
ggplot(mapping = aes(x = API_Name,
y = removal_rate_perc,
fill = fct_inorder(treatment))) +
geom_col(position = "dodge") +
scale_fill_viridis_d() +
theme_minimal()
API_removal_rates_bars
wwt_share_by_county_2020 %>% group_by(County_Name) %>% summarise(sum((wwt_pop_share)))
Norway_county_pies_WWT
wwt_share_by_county_2020
wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario)
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario),
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name, ~Scenario) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario),
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_grid(~County_Name, ~Scenario) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario) %>%
mutate(County_Name = paste0("County_Name", "Scenario", sep = "_", na.rm = TRUE))
# By hand is faster than figuring out how to write the code
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario),
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
Norway_county_pies_WWT
wwt_share_total_by_scenario
wt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario) %>%
mutate(County_Name = paste0(County_Name, Scenario, sep = "_", na.rm = TRUE))
# By hand is faster than figuring out how to write the code
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario),
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
Norway_county_pies_WWT
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario) %>%
mutate(County_Name = paste0(County_Name, Scenario, sep = "_", na.rm = TRUE))
# By hand is faster than figuring out how to write the code
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
wwt_share_total_by_scenario
# Generate some additional scenario pies for the whole country
wwt_share_total_by_scenario <- wwt_share_by_county_2020 %>% filter(County_Name == "Total") %>%
crossing(Scenario = c("2+", "3")) %>%
arrange(Scenario) %>%
mutate(County_Name = paste0(County_Name, Scenario, sep = "_"))
# By hand is faster than figuring out how to write the code
wwt_share_total_by_scenario$wwt_pop_share <- c(0, 0, 1 - 0.36459325, 0.36459325,
0, 0, 0, 1)
wwt_share_by_county_scenario <- wwt_share_by_county_2020 %>% rbind(wwt_share_total_by_scenario)
wwt_share_by_county_scenario
View(wwt_share_by_county_scenario)
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_scenario ,
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
wwt_share_by_county_scenario %>% group_by(County_Name) %>% summarise(sum(wwt_pop_share ))
Norway_county_pies_WWT <- ggplot(data = wwt_share_by_county_scenario ,
mapping = aes(fill = Class_EU,
x = 0,
y = wwt_pop_share,
group = County_Name)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~County_Name) +
scale_fill_viridis_d(option = "viridis", begin = 0, end = 0.5) +
theme_void()
Norway_county_pies_WWT
API_removal_rates_bars <- API_removal_rates %>%
mutate(API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin", "diclofenac",
"ibuprofen", "paracetamol", "mean"))) %>%
ggplot(mapping = aes(x = API_Name,
y = removal_rate_perc,
fill = fct_inorder(treatment))) +
geom_col(position = "dodge") +
scale_fill_viridis_d() +
theme_minimal()
API_removal_rates_bars
API_removal_rates_bars <- API_removal_rates %>%
mutate(API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin", "diclofenac",
"ibuprofen", "paracetamol", "mean"))) %>%
ggplot(mapping = aes(x = API_Name,
y = removal_rate_perc,
fill = fct_inorder(treatment))) +
geom_col(position = "dodge") +
scale_fill_viridis_d(name = c("Primary", "Secondary", "Tertiary", "Advanced", "Ozone", "Activated Carbon")) +
theme_minimal() +
labs(x = "API", y = "Removal Rate (%)", )
API_removal_rates_bars
API_removal_rates_bars <- API_removal_rates %>%
mutate(API_Name = fct_relevel(API_Name, c("estradiol", "ethinylestradiol", "ciprofloxacin", "diclofenac",
"ibuprofen", "paracetamol", "mean"))) %>%
ggplot(mapping = aes(x = API_Name,
y = removal_rate_perc,
fill = fct_inorder(treatment))) +
geom_col(position = "dodge") +
scale_fill_viridis_d(name = "Removal Type",
labels = c("Primary", "Secondary", "Tertiary", "Advanced", "Ozone", "Activated Carbon")) +
theme_minimal() +
labs(x = "API", y = "Removal Rate (%)", )
API_removal_rates_bars
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_WWT_map
ggsave(filename = "output/images/raw/figure02_map_WWT.svg", device = "svg",
width = 5, height = 10, units = "cm")
Norway_county_pies_WWT
ggsave(filename = "output/images/raw/figure02_pies_WWT.svg", device = "svg",
width = 20, height = 10, units = "cm")
API_removal_rates_bars
ggsave(filename = "output/images/raw/figure02_bars_removal.svg", device = "svg",
width = 20, height = 5, units = "cm")
source(file = "src/data_processing/map_preparation.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
source(file = "src/graphics/RQ_map_year.R")
# Save as SVG for modification
Norway_county_pies_RQ
ggsave(filename = "output/images/raw/figure04_pies_RQ.svg", device = "svg",
width = 20, height = 10, units = "cm")
Norway_county_RQ_map
ggsave(filename = "output/images/raw/figure04_map_RQ.svg", device = "svg",
width = 20, height = 10, units = "cm")
