coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9)
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9,
names_transform = str_remove("API_name", "Population"))
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9)
?str_remove
fruits <- c("one apple", "two pears", "three bananas")
str_remove(fruits, "[aeiou]")
str_remove_all(fruits, "[aeiou]")
str_trim()
?str_trim()
?stringr
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)"))
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)") %>%
str_remove_all(string = name, pattern = "\:Population"),
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)") %>%
str_remove_all(string = name, pattern = ":Population"),
Total_Sold_g)
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)") %>%
str_remove_all(string = name, pattern = ":Population"))
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)|(:Population)"))
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9)
test <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)|(:Population)"),
Sales_to_Pop_g = value)
Sales_over_Pop <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
coef() %>%
as.list() %>%
as.tibble() %>%
pivot_longer(cols = 2:9) %>%
transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)|(:Population)"),
Sales_over_Pop_g = value)
View(Sales_over_Pop)
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C)
View(Sales_Projections_21C)
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g)
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g) %>%
# Pick some APIs
filter(API_Name %in% c("Paracetamol", "Ethinylestradiol"))
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g)
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name)) +
geom_point(shape = Scenario) +
geom_path()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name)) +
geom_point(aes(shape = Scenario)) +
geom_path()
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g) %>%
# Pick some APIs
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name)) +
geom_point(aes(shape = Scenario)) +
geom_path()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name)) +
geom_point(aes(shape = Scenario)) +
geom_line()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name,
group = Scenario)) +
geom_point(aes(shape = Scenario)) +
geom_line()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name,
group = Scenario, API_Name)) +
geom_point(aes(shape = Scenario)) +
geom_line()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name,
shape = Scenario)) +
geom_point() +
geom_line()
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name,
shape = Scenario)) +
geom_point() +
geom_path()
View(NIPH_Sales_Weights_Summed)
Sales_Projections_21C
Sales_Projections_21C %>%
select(-Sales_over_Pop, -Population, year = sYear, Total_Sold_g = Sales_Proj_g)
Sales_Projections_21C %>%
select(-Sales_over_Pop, -Population) %>%
rename(year = sYear, Total_Sold_g = Sales_Proj_g)
Sales_Projections_21C
Sales_Projections_21C %>%
select(-Sales_over_Pop_g, -Population) %>%
rename(year = sYear, Total_Sold_g = Sales_Proj_g)
Sales_Projections_21C %>%
select(-Sales_over_Pop_g, -Population)
Sales_Projections_21C %>%
dplyr::select(-Sales_over_Pop_g, -Population) %>%
rename(year = sYear, Total_Sold_g = Sales_Proj_g)
Sales_Projections_Records <- Sales_Projections_21C %>%
dplyr::select(-Sales_over_Pop_g, -Population) %>%
rename(sYear = year, Sales_Proj_g = Total_Sold_g)
?select
Sales_Projections_21C %>%
dplyr::select(-Sales_over_Pop_g, -Population)
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sales_g = Sales_Proj_g,
sYear = Year, Scenario)
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario) %>%
left_join(y = NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"),
by = c(API_Name, sYear))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario)
View(Sales_Projections_Records)
NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario) %>%
left_join(y = NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"),
by = c("API_Name", "sYear"))
NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")
Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario) %>%
left_join(y = NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"),
by = c("API_Name", "sYear"))
NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario) %>%
left_join(y = NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"),
by = c("API_Name"))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year, Scenario) %>%
add_row(y = NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"))
Norway_Population_Projections_21C <- read_xlsx(path = "Data/Statistics_Norway/Pop_Forecasts_21C.xlsx",
range = "B4:J7") %>%
rename("Scenario" = `...1`) %>%
pivot_longer(cols = 2:9,
names_to = "Year",
values_to = "Population") %>%
mutate(Year = as.double(Year))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"))
View(Norway_Population_Projections_21C)
View(Sales_Projections_21C)
# Run some examples and see how it looks graphed
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g) %>%
# Pick some APIs
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"))
Sales_Projections_21C <-
crossing(Sales_over_Pop, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * Sales_over_Pop_g) %>%
# Pick some APIs
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured"))
ggplot(data = Sales_Projections_21C,
mapping = aes(x = Year,
y = Sales_Proj_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
ggplot(data = Sales_Projections_Records,
mapping = aes(x = Year,
y = Total_Sold_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
ggplot(data = Sales_Projections_Records,
mapping = aes(x = sYear,
y = Total_Sold_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")) %>%
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
ggplot(data = Sales_Projections_Records,
mapping = aes(x = sYear,
y = Total_Sold_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
lm_paracetamol <- lm(Total_Sold_g ~  API_Name:Population,
data = API_sales_by_population %>% filter(API_Name == "Paracetamol"))
lm_paracetamol <- lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "Paracetamol"))
PI_sales_by_population %>% filter(API_Name == "Paracetamol")
API_sales_by_population %>% filter(API_Name == "Paracetamol")
lm_paracetamol <- lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "paracetamol"))
View(lm_paracetamol)
lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "paracetamol")) %>%
coefficients()
lm_ethinylestradiol <- lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "ethinylestradiol")) %>%
coefficients()
APIs_LM <- tibble(Interesting_APIs)
View(APIs_LM)
View(API_sales_by_population)
lm_paracetamol <- lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "paracetamol"))
lm_paracetamol
lm_paracetamol <- lm(Total_Sold_g ~ Population,
data = API_sales_by_population %>% filter(API_Name == "paracetamol")) %>%
coefficients()
lm_paracetamol
?map
broom::tidy.lm(lm_paracetamol)
broom::tidy(lm_paracetamol)
LMs_API <- API_sales_by_population %>%
group_by(API_Name)
summarise(lm_intercept = lm(Total_Sold_g ~ Population, data = .))
LMs_API <- API_sales_by_population %>%
group_by(API_Name)
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population)))
API_sales_by_population
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population)))
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population)[1]),
lm_coef = coef(lm(Total_Sold_g ~ Population)[2]))
View(LMs_API)
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population)[1]),
lm_coef = coef(lm(Total_Sold_g ~ Population)[2]))
coef(lm(Total_Sold_g ~ Population)[1]
)
coef(lm(Total_Sold_g ~ Population)[1], data = API_sales_by_population)
View(API_sales_by_population)
coef(lm(Total_Sold_g ~ Population, data = API_sales_by_population))[1]
coef(lm(Total_Sold_g ~ Population, data = API_sales_by_population))[[1]]
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population)[[1]]),
lm_coef = coef(lm(Total_Sold_g ~ Population)[[2]]))
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population))[[1]],
lm_coef = coef(lm(Total_Sold_g ~ Population))[[2]])
View(LMs_API)
LMs_API
Sales_Projections_21C <-
crossing(LMs_API, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * lm_coef + lm_intercept) %>%
# Pick some APIs
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")) %>%
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
ggplot(data = Sales_Projections_Records,
mapping = aes(x = sYear,
y = Total_Sold_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
View(Norway_Population_Projections_21C)
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
library(TTR)
library(forecast)
library(lme4)
library(sjPlot)
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
# Immediately shortlist to interesting APIs to save time later
Interesting_APIs <- c("estradiol", "ethinylestradiol", "levonorgestrel", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin", "amoxicillin")
NIPH_Sales_Weights <- NIPH_Sales_Weights %>% filter(API_Name %in% Interesting_APIs)
# To calculate historic PECs, we'll need historic population and WW production figures
# mainland Norwegian population on 1 Jan per year 1951 - 2021
# accessed from https://data.ssb.no/api/v0/en/table/06913/
# 15:57 12/05/2021
Norway_Population_Year <- read_xlsx(path = "Data/Statistics_Norway/Pop_1951_2021.xlsx",
range = "B4:C74",
col_names = c("Year", "Population")) %>%
mutate(Year = as.numeric(Year))
# wastewater consumption per person per day in Norway 2015 - 2020 (SSB)
# accessed from https://data.ssb.no/api/v0/en/table/11787/
# 14:49 12/05/2021
Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day") %>%
# Make sure Year is numeric so it doesn't break everything
mutate(Year = as.numeric(Year)) %>%
# Obviously this doesn't go back far enough, so we'll backfill it to 1999 with fake data
add_row(Year = 1999:2014, L_per_person_per_day = 180)
# Norwegian Population Predictions from SSB (No Uncertainty Included)
Norway_Population_Projections_21C <- read_xlsx(path = "Data/Statistics_Norway/Pop_Forecasts_21C.xlsx",
range = "B4:J7") %>%
rename("Scenario" = `...1`) %>%
pivot_longer(cols = 2:9,
names_to = "Year",
values_to = "Population") %>%
mutate(Year = as.double(Year))
NIPH_Sales_Weights_Summed <- NIPH_Sales_Weights %>%
group_by(API_Name, sYear) %>%
summarise(Total_Sold_g = sum(API_AmountSoldValue, na.rm = TRUE))
ggplot(data = NIPH_Sales_Weights_Summed,
mapping = aes(x = sYear, y = Total_Sold_g, colour = API_Name)) +
geom_line() +
scale_y_continuous(trans = "log10")
API_sales_by_population <-
NIPH_Sales_Weights_Summed %>% left_join(y = Norway_Population_Year, by = c("sYear" = "Year"))
ggplot(data = API_sales_by_population, mapping =
aes(x = Population,
y = Total_Sold_g,
colour = API_Name)) +
geom_point() +
geom_smooth(method = "lm")
# Calculate a linear relationship between sales and population
# Sales_over_Pop <- lm(Total_Sold_g ~  API_Name:Population, data = API_sales_by_population) %>%
# coef() %>%
#   as.list() %>%
#   as.tibble() %>%
#   pivot_longer(cols = 2:9) %>%
#   transmute(API_Name = str_remove_all(string = name, pattern = "(API_Name)|(:Population)"),
#             Sales_over_Pop_g = value)
# Pretty sure the above lm sucked, so let's try running individual LMs
LMs_API <- API_sales_by_population %>%
group_by(API_Name) %>%
summarise(lm_intercept = coef(lm(Total_Sold_g ~ Population))[[1]],
lm_coef = coef(lm(Total_Sold_g ~ Population))[[2]])
ggplot(data = Norway_Population_Projections_21C, mapping = aes(
x = Year,
y = Population,
colour = Scenario,
group = Scenario)) +
geom_point() +
geom_path()
# Run some examples and see how it looks graphed
Sales_Projections_21C <-
crossing(LMs_API, Norway_Population_Projections_21C) %>%
mutate(Sales_Proj_g = Population * lm_coef + lm_intercept) %>%
# Pick some APIs
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_g = Sales_Proj_g,
sYear = Year,
Scenario) %>%
add_row(NIPH_Sales_Weights_Summed %>% transmute(API_Name,
sYear,
Total_Sold_g,
Scenario = "Measured")) %>%
filter(API_Name %in% c("paracetamol", "ethinylestradiol"))
ggplot(data = Sales_Projections_Records,
mapping = aes(x = sYear,
y = Total_Sold_g,
colour = API_Name,
shape = Scenario)) +
geom_point()
