summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
mutate(states = case_when(states == 0.75 && Class_EU == "tertiary" ~ 1.0,
TRUE ~ states))
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states)
WWT_level_states[Class_EU == "tertiary"]
WWT_level_states{[Class_EU == "tertiary"]}
WWT_level_states[[Class_EU == "tertiary"]]
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
mutate(states = 1)
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
mutate(states = case_when(Class_EU == "tertiary" ~ 1,
TRUE ~ 0))
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
mutate(states = case_when((Class_EU == "tertiary" ~ 1 & states == 0.75),
TRUE ~ 0))
# How many states should each node have? What values do these states have
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
mutate(states = case_when((Class_EU == "tertiary"& states == 0.75) ~ 1 ,
TRUE ~ 0))
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
mutate(states = case_when((Class_EU == "tertiary"& states == 0.75) ~ 1 ,
TRUE ~ states))
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
# some intensely ugly code to produce a list of valid discretised states per treatment level
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
# no county has a tertiary level of 0.75, so we swap it for 1 (Oslo)
mutate(states = case_when((Class_EU == "tertiary"& states == 0.75) ~ 1 ,
TRUE ~ states))
# Set up a big dataframe of all node values
temp <- wwt_share_by_county_2020_disc %>%
select(County_Name, wwt_pop_share_disc, Class_EU) %>%
# YAH: Make vector into a factor/preserve level order
crossing(Scenario = factor(levels = c("Current", "Compliance", "Upgrade")),
# use the WWT_level_states we set earlier to cross w/ relevant levels
Value = WWT_level_states %>%
select(states) %>%
pull()) %>%
mutate(present = as.numeric(wwt_pop_share_disc == Value)) %>%
arrange(Class_EU, County_Name, Scenario) %>%
pivot_wider(names_from = c("County_Name", "Scenario"),
values_from = present,
values_fill = 0) %>%
filter(wwt_pop_share_disc == Value)
WWT_level_states <- wwt_share_by_county_2020_disc %>%
group_by(Class_EU) %>%
summarise(n_states = n_distinct(wwt_pop_share_disc)) %>%
crossing(states = c(0, 0.25, 0.5, 0.75, 1)) %>%
group_by(Class_EU) %>%
# some intensely ugly code to produce a list of valid discretised states per treatment level
summarise(n_in_class = row_number(),
n_states,
states) %>%
filter(n_in_class <= n_states) %>%
select(Class_EU, states) %>%
# no county has a tertiary level of 0.75, so we swap it for 1 (Oslo)
mutate(states = case_when((Class_EU == "tertiary"& states == 0.75) ~ 1 ,
TRUE ~ states))
# Set up a big dataframe of all node values
all_removal_nodes <- wwt_share_by_county_2020_disc %>%
select(County_Name, wwt_pop_share_disc, Class_EU) %>%
# YAH: Make vector into a factor/preserve level order
crossing(Scenario = factor(levels = c("Current", "Compliance", "Upgrade")),
# use the WWT_level_states we set earlier to cross w/ relevant levels
Value = WWT_level_states %>%
select(states) %>%
pull()) %>%
mutate(present = as.numeric(wwt_pop_share_disc == Value)) %>%
arrange(Class_EU, County_Name, Scenario) %>%
pivot_wider(names_from = c("County_Name", "Scenario"),
values_from = present,
values_fill = 0) %>%
filter(wwt_pop_share_disc == Value)
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
View(test_CPT_dataframe)
?cross
?across
range(0, 1, 1)
test <- range(0, 1, 1)
test
test_CPT_dataframe%>% select(across(range() == c(0, 1)))
test_CPT_dataframe %>% select(across(range() == c(0, 1)))
test_CPT_dataframe %>% select(range() == c(0,1))
test_CPT_dataframe %>% select(where(range() == c(0, 1)))
test_CPT_dataframe %>% select(where(is.numeric()))
test_CPT_dataframe %>% select(where(is.numeric)
)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove any columns with values other than 0 or 1
CPT_dataframe_selected <- CPT_dataframe %>% select(where(range == c(0, 1)))
# Save as a CSV at CPT_save_path
}
save_CPT(test_CPT_dataframe)
CPT_dataframe_selected <- CPT_dataframe %>% select(where(~ range(.x) == c(0, 1)))
test_CPT_dataframe %>% select(where(~ range(.x) == c(0, 1)))
iris %>% select(where(~ is.numeric(.x) && mean(.x) > 3.5))
iris %>% select(where(~ mean(.x) > 3.5))
test_CPT_dataframe %>% select(where(~ is.numeric(.x) && range(.x) == c(0, 1)))
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove any columns with values other than 0 or 1
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Save as a CSV at CPT_save_path
}
save_CPT(test_CPT_dataframe)
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove any columns with values other than 0 or 1
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Save as a CSV at CPT_save_path
}
save_CPT(test_CPT_dataframe)
CPT_dataframe_selected
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove any columns with values other than 0 or 1
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Save as a CSV at CPT_save_path
return(CPT_dataframe_selected)
}
save_CPT(test_CPT_dataframe)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Save as a CSV at CPT_save_path
write_csv(x = CPT_dataframe_selected, file = CPT_save_path)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.csv")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Save as a CSV at CPT_save_path
write_csv(x = CPT_dataframe_selected, file = CPT_save_path, col_names = FALSE)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.csv")
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
?write_lines
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", skip = 2)
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", append = TRUE)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write_lines(x = CPT_dataframe, file = CPT_save_path)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write_lines(x = CPT_dataframe, file = CPT_save_path, append = TRUE)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe, file = CPT_save_path, append = TRUE)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", append = TRUE)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe, file = CPT_save_path, append = TRUE, col.names = FALSE)
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", append = TRUE)
?write.table
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe, file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", append = TRUE)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe_selected, file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt", append = TRUE)
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = format(CPT_dataframe_selected, digits = 2),
file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
CPT_dataframe_selected
CPT_dataframe
test_CPT_dataframe
test_CPT_dataframe%>% select(-wwt_pop_share_disc, -Value, -Class_EU)
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = format(CPT_dataframe_selected, digits = 2),
file = CPT_save_path,
append = TRUE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>% select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
?write.table
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
format(digits = 2)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
test_CPT_dataframe %>% format(digits = 2)
test_CPT_dataframe %>% format(nsmall = 2)
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none") %>%
mutate(across(digits = 2))
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(digits = 2))
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
CPT_dataframe_selected
test_CPT_dataframe%>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(digits = 2))
test_CPT_dataframe%>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(digits = 2)) %>%
colnames() <- NULL
colnames(test_CPT_dataframe) <- NULL
test_CPT_dataframe
test_CPT_dataframe
print(test_CPT_dataframe)
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none")
print(test_CPT_dataframe)
?print
print(test_CPT_dataframe, digits = 2)
print(test_CPT_dataframe, digits = 3)
print(test_CPT_dataframe, digits = 1000)
print(test_CPT_dataframe, zero.print = 1)
print(test_CPT_dataframe, zero.print = 2)
test_CPT_dataframe <- all_removal_nodes %>% filter(Class_EU == "none") %>%
mutate(across(is.integer <- as.double()))
test_CPT_dataframe
save_CPT <- function(CPT_dataframe, CPT_save_path){
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = CPT_save_path)
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = CPT_save_path,
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
}
save_CPT(CPT_dataframe = test_CPT_dataframe,
CPT_save_path = "data/Hugin/test_cpt_plz_ignore.txt")
# Remove columns used to format the CPT
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU)
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = "data/Hugin/test_cpt_plz_ignore.txt",
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
CPT_dataframe_selected
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = "data/Hugin/test_cpt_plz_ignore.txt",
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
CPT_dataframe_selected
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double())) %>%
as.data.frame()
CPT_dataframe_selected
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = "data/Hugin/test_cpt_plz_ignore.txt",
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
CPT_dataframe_selected
CPT_dataframe_selected
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
CPT_dataframe_selected
CPT_dataframe_selected %>% mutate(Agder_Current = format(Agder_Current, digits = 2))
CPT_dataframe_selected %>% mutate(Agder_Current = format(Agder_Current, digits = 2))
CPT_dataframe_selected
CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ num(., digits = 2)))
CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ num(., digits = 2)))
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
CPT_dataframe_selected
CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ num(., digits = 1)))
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = "data/Hugin/test_cpt_plz_ignore.txt",
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
CPT_dataframe_selected
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
CPT_dataframe_selected
CPT_dataframe_selected <- CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ num(., digits = 1)))
# Create a text file with HUGIN's preferred table header
write_lines(x = "CPT", file = "data/Hugin/test_cpt_plz_ignore.txt")
# Then add the CPT
write.table(x = CPT_dataframe_selected,
file = "data/Hugin/test_cpt_plz_ignore.txt",
append = TRUE, col.names = FALSE, row.names = FALSE,
sep = ",")
CPT_dataframe_selected <- CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ num(., digits = 1))) %>%
mutate(across(), ~ as.character(.))
# Take the submitted dataframe
# Remove columns used to format the CPT
CPT_dataframe_selected <- test_CPT_dataframe %>%
select(-wwt_pop_share_disc, -Value, -Class_EU) %>%
mutate(across(is.integer <- as.double()))
CPT_dataframe_selected
CPT_dataframe_selected <- CPT_dataframe_selected %>%
mutate(across(where(is.numeric), ~ as.character(num(., digits = 1))))
?as.character()
?as.character()
as.character(8)
as.character(8.1)
