### Read data from processed database
## NB: In the uploaded version this file is removed. Please
## replace the file name with: t850_Sales_Product_API_20210913_1200_Censored
sales_by_API_year <- read_xlsx(path = "Data/Db/t830_Product_API_sold_per_year.xlsx")
getwd()
" "
library(glmm)
library(MASS)
library(lme4)
library(tidyverse)
library(readxl)
library(glmm)
fit <- lmer(log(Sales_Weight_g) ~ -1 + API + (1 | x.year), data = estrogen_example_data)
# Import Data
setwd("C:/Users/burne/OneDrive - NIVA/Projects/Papers/03_Bayesian_Mixture_Toxicity/")
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
fit <- lmer(log(Sales_Weight_g) ~ -1 + API + (1 | x.year), data = estrogen_example_data)
fit <- lmer(log(Sales_Weight_g) ~ -1 + API + (1 | Year), data = estrogen_example_data)
fit
summary(fit)
exp(summary(fit)$coef[,"Estimate"])
plot(fit)
plot(fit$APIethinylestradiol)
stderr()
?stderr()
View(fit)
test <- summary(fit)
View(test)
summary(fit)
(0.1901 * sqrt(5)) ^ 2
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
# Set wd to project folder
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# Import Data
setwd("C:/Users/burne/OneDrive - NIVA/Projects/Papers/03_Bayesian_Mixture_Toxicity/")
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
library(MASS)
library(lme4)
library(tidyverse)
library(readxl)
library(glmm)
install.packages("glmm")
library(MASS)
library(lme4)
library(tidyverse)
library(readxl)
library(glmm)
# Import Data
setwd("C:/Users/burne/OneDrive - NIVA/Projects/Papers/03_Bayesian_Mixture_Toxicity/")
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
getwd()
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
library(fitdistrplus)
bad_lnd_estradiol <- fitdist(estrogen_example_data$Sales_Weight_g, "lnorm")
summary(bad_lnd_estradiol)
plot(bad_lnd_estradiol)
summary(bad_lnd_estradiol)
fit <- lmer(log(Sales_Weight_g) ~ -1 + API + (1 | Year), data = estrogen_example_data)
summary(fit)
exp(summary(fit)$coef[,"Estimate"])
library(drc)
?drc
library(drc)
weibull1(fixed = c(0.044, -0.75, NA, 1.05))
test <- weibull1(fixed = c(0.044, -0.75, NA, 1.05))
plot(test)
View(test)
## Model fit to simulate from
ryegrass.m1 <- drm(rootl~conc, data = ryegrass, fct = LL.4())
## 10 random dose-response curves based on the model fit
sim10a <- rdrm(10, LL.4(), coef(ryegrass.m1), xerror = ryegrass$conc)
sim10a
plot(ryegrass.m1)
?earthworms
#import dataset
EW<-earthworms()
EW<-data(earthworms)
# print data #
EW
head(EW)
data(earthworms)
data(earthworms)
earthworms
earthworms()
EW<-earthworms
EW
head(EW)
plot(EW$dose,EW$number/EW$total)
EW.ll4<-drm(number/total~dose, type="binomial",weight=total, data=EW, fct=LL.4())
plot(EW.ll4, type="all")
EW.ll3<-update(EW.ll4, fct=LL.3())
plot(EW.ll3, type="all")
anova(EW.ll2,EW.ll3)
EW.ll2<-update(EW.ll3, fct=LL.2())
plot(EW.ll2, type="all")
anova(EW.ll2,EW.ll3)
ED(EW.ll3,c(10,25,50), interval="delta")
mselect(EW.ll3, list( W1.3(), W2.3(), LN.3()))
setwd("C:/Users/burne/OneDrive - NIVA/Projects/Papers/03_Bayesian_Mixture_Toxicity/")
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
library(MASS)
library(lme4)
library(tidyverse)
library(readxl)
library(glmm)
estrogen_example_data <- read_xlsx("Data/Example_Estrogen_Sales.xlsx")
fit <- lmer(log(Sales_Weight_g) ~ -1 + API + (1 | Year), data = estrogen_example_data)
summary(fit)
exp(summary(fit)$coef[,"Estimate"])
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "../Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "../Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
View(NIPH_Sales_Weights)
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
Interesting_APIs <- c("estradiol", "etinylestradiol", "levonorgestrel", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin", "amoxicillin")
NIPH_Sales_Weights <- NIPH_Sales_Weights %>% filter(API_Name %in% Interesting_APIs)
Norway_Wastewater_Year <- read_xlsx(path = "Data/SSB/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day") %>%
# Make sure Year is numeric so it doesn't break everything
mutate(Year = as.numeric(Year))
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
# Immediately shortlist to interesting APIs to save time later
Interesting_APIs <- c("estradiol", "etinylestradiol", "levonorgestrel", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin", "amoxicillin")
NIPH_Sales_Weights <- NIPH_Sales_Weights %>% filter(API_Name %in% Interesting_APIs)
# To calculate historic PECs, we'll need historic population and WW production figures
# mainland Norwegian population on 1 Jan per year 1951 - 2021
# accessed from https://data.ssb.no/api/v0/en/table/06913/
# 15:57 12/05/2021
Norway_Population_Year <- read_xlsx(path = "Data/Statistics_Norway/Pop_1951_2021.xlsx",
range = "B4:C74",
col_names = c("Year", "Population")) %>%
mutate(Year = as.numeric(Year))
# wastewater consumption per person per day in Norway 2015 - 2020 (SSB)
# accessed from https://data.ssb.no/api/v0/en/table/11787/
# 14:49 12/05/2021
# Obviously this doesn't go back far enough, so we'll backfill it to 1999 with fake data
Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day") %>%
# Make sure Year is numeric so it doesn't break everything
mutate(Year = as.numeric(Year))
View(Norway_Wastewater_Year)
Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day") %>%
# Make sure Year is numeric so it doesn't break everything
mutate(Year = as.numeric(Year)) %>%
# Obviously this doesn't go back far enough, so we'll backfill it to 1999 with fake data
add_row(Year = 1999:2014, L_per_person_per_day = 180)
View(NIPH_Sales_Weights)
NIPH_Sales_Weights_Summed <- NIPH_Sales_Weights %>%
group_by(API_Name, sYear) %>%
summarise(Total_Sold_g = sum(API_AmountSoldValue))
View(NIPH_Sales_Weights_Summed)
NIPH_Sales_Weights_Summed <- NIPH_Sales_Weights %>%
group_by(API_Name, sYear) %>%
summarise(Total_Sold_g = sum(API_AmountSoldValue, na.rm = TRUE))
ggplot(data = NIPH_Sales_Weights_Summed,
mapping = aes(x = sYear, y = Total_Sold_g)) +
geom_line()
NIPH_Sales_Weights_Summed <- NIPH_Sales_Weights %>%
group_by(API_Name, sYear) %>%
summarise(Total_Sold_g = sum(API_AmountSoldValue, na.rm = TRUE))
ggplot(data = NIPH_Sales_Weights_Summed,
mapping = aes(x = sYear, y = Total_Sold_g, colour = API_Name)) +
geom_line()
ggplot(data = NIPH_Sales_Weights_Summed,
mapping = aes(x = sYear, y = Total_Sold_g, colour = API_Name)) +
geom_line() +
scale_y_continuous(trans = "log10")
ts(data = NIPH_Sales_Weights_Summed)
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed)
plot.ts(NIPH_Sales_Weights_ts)
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>% filter(API_Name == "Amoxicillin"))
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin"))
plot.ts(NIPH_Sales_Weights_ts)
View(NIPH_Sales_Weights_ts)
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin" %>% select(-API_Name)))
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(-API_Name))
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(-API_Name)
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin")
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(API_Name)
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin")
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(API_Name)
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(-API_Name)
NIPH_Sales_Weights_Summed %>% filter(API_Name == "amoxicillin") %>% select(obj = -API_Name)
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>%
ungroup() %>%
filter(API_Name == "amoxicillin") %>%
select(-API_Name))
NIPH_Sales_Weights_Summed
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed %>%
ungroup() %>%
filter(API_Name == "amoxicillin") %>%
select(-API_Name))
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
select(-API_Name)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
tidyverse::select(-API_Name)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
dplyr::select(-API_Name)
NIPH_Sales_Weights_ts <- ts(data = )
plot.ts(NIPH_Sales_Weights_ts)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
dplyr::select(-API_Name)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox)
plot.ts(NIPH_Sales_Weights_ts)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
dplyr::select(-API_Name)
View(NIPH_Sales_Weights_Summed_Amox)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
ungroup() %>%
dplyr::select(-API_Name)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox)
plot.ts(NIPH_Sales_Weights_ts)
?ts
NIPH_Sales_Weights_ts
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019)
plot.ts(NIPH_Sales_Weights_ts)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
install.packages("TTR")
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
library(TTR)
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_SMA8 <- SMA(x = NIPH_Sales_Weights_ts, n = 8)
plot.ts(NIPH_Sales_Weights_ts_SMA8)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
NIPH_Sales_Weights_ts_forecast
plot(NIPH_Sales_Weights_ts_forecast)
install.packages("forecast")
library(forecast)
NIPH_Sales_Weights_ts_forecast_2 <- forecast.HoltWinters(NIPH_Sales_Weights_ts, h = 24)
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
library(TTR)
library(forecast)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin") %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
NIPH_Sales_Weights_ts_forecast_2 <- forecast.HoltWinters(NIPH_Sales_Weights_ts, h = 24)
hw(NIPH_Sales_Weights_ts, h = 24)
NIPH_Sales_Weights_ts_forecast_2 <- hw(NIPH_Sales_Weights_ts, h = 5)
# An attempt at an actual forecast 31 (!) years into the future
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 8)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin", sYear != 2019)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "amoxicillin", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "ciprofloxacin", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "diclofenac", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "estradiol", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "ibuprofen", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "levonorgestrel", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_Summed_Amox <- NIPH_Sales_Weights_Summed %>%
filter(API_Name == "paracetamol", sYear != 2019) %>%
ungroup() %>%
dplyr::select(-API_Name, -sYear)
NIPH_Sales_Weights_ts <- ts(data = NIPH_Sales_Weights_Summed_Amox,
start = 1999,
end =  2019,
frequency = 1)
plot.ts(NIPH_Sales_Weights_ts)
# We can try smoothing, but it doesn't seem appropriate given our data?
NIPH_Sales_Weights_ts_SMA3 <- SMA(x = NIPH_Sales_Weights_ts, n = 3)
plot.ts(NIPH_Sales_Weights_ts_SMA3)
NIPH_Sales_Weights_ts_forecast <- HoltWinters(NIPH_Sales_Weights_ts,
beta = FALSE,
gamma = FALSE)
plot(NIPH_Sales_Weights_ts_forecast)
# An attempt at an actual forecast 31 (!) years into the future
# Using the Holt function from Forecast
NIPH_Sales_Weights_ts_forecast_2 <- holt(NIPH_Sales_Weights_ts, h = 31)
plot(NIPH_Sales_Weights_ts_forecast_2)
NIPH_Sales_Weights_ts_forecast_2
View(NIPH_Sales_Weights_ts_forecast_2)
View(NIPH_Sales_Weights_Summed_Amox)
?ts
library(tidyverse)
library(lme4)
library(readxl)
library(drc)
library(TTR)
library(forecast)
# Task: Load in NIPH data back to 199-whenever
getwd()
NIPH_Sales_Weights <- read_excel(path = "Data/NIPH_DB/t830_Product_API_sold_per_year_20220629.xlsx")
# Immediately shortlist to interesting APIs to save time later
Interesting_APIs <- c("estradiol", "etinylestradiol", "levonorgestrel", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin", "amoxicillin")
NIPH_Sales_Weights <- NIPH_Sales_Weights %>% filter(API_Name %in% Interesting_APIs)
# To calculate historic PECs, we'll need historic population and WW production figures
# mainland Norwegian population on 1 Jan per year 1951 - 2021
# accessed from https://data.ssb.no/api/v0/en/table/06913/
# 15:57 12/05/2021
Norway_Population_Year <- read_xlsx(path = "Data/Statistics_Norway/Pop_1951_2021.xlsx",
range = "B4:C74",
col_names = c("Year", "Population")) %>%
mutate(Year = as.numeric(Year))
# wastewater consumption per person per day in Norway 2015 - 2020 (SSB)
# accessed from https://data.ssb.no/api/v0/en/table/11787/
# 14:49 12/05/2021
Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day") %>%
# Make sure Year is numeric so it doesn't break everything
mutate(Year = as.numeric(Year)) %>%
# Obviously this doesn't go back far enough, so we'll backfill it to 1999 with fake data
add_row(Year = 1999:2014, L_per_person_per_day = 180)
View(Norway_Wastewater_Year)
Norway_Wastewater_Year <- read_xlsx(path = "Data/Statistics_Norway/WW_per_PD_2015_2020.xlsx",
range = "B4:G5") %>%
# Pivot into long data
pivot_longer(cols = 1:6,
names_to = "Year",
values_to = "L_per_person_per_day")
