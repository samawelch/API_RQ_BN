labs(x = "Urbanisation Quartile", y = "Urban Population Proportion")
# Norway_county_boxplot_urb
Norway_county_boxplot_pop <-
ggplot(data = Norway_County_General_2020, mapping = aes(x = urb_quantile, y = Pop_mil)) +
geom_point(aes(colour = exemplar), size = 2) +
scale_colour_manual(values = c("darkgreen", "lightgreen")) +
geom_boxplot(alpha = 0) +
theme(legend.position = "none") +
labs(x = "Urbanisation Quartile", y = "County Population (mil)")
# Norway_county_boxplot_pop
Norway_county_boxplot_ww <-
ggplot(data = Norway_County_General_2020, mapping = aes(x = urb_quantile, y = Consumption_PPerson_PDay)) +
geom_point(aes(colour = exemplar), size = 2) +
scale_colour_manual(values = c("darkgreen", "lightgreen")) +
geom_boxplot(alpha = 0) +
theme(legend.position = "none") +
labs(x = "Urbanisation Quartile", y = "Wastewater Produced Per Person Per Day (L)")
# Norway_county_boxplot_ww
Norway_county_boxplot_wwt <-
ggplot(data = Norway_County_General_2020, mapping = aes(x = urb_quantile, y = Arbitrary_WWT_Index)) +
geom_point(aes(colour = exemplar), size = 2) +
scale_colour_manual(values = c("darkgreen", "lightgreen")) +
geom_boxplot(alpha = 0) +
theme(legend.position = "none")  +
labs(x = "Urbanisation Quartile", y = "Arbitrary Wastewater Treatment Index (0 = none, 1 = all 3ary)")
# Norway_county_boxplot_wwt
Norway_county_boxplots <- plot_grid(Norway_county_boxplot_urb,
Norway_county_boxplot_pop,
Norway_county_boxplot_ww,
Norway_county_boxplot_wwt,
nrow = 2)
Norway_county_boxplots
install.packages(c("bit", "boot", "broom", "bslib", "car", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "foreign", "ggfun", "ggrepel", "glmm", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "lme4", "maptools", "markdown", "Matrix", "minqa", "modelr", "nlme", "nnet", "openssl", "pkgload", "plyr", "png", "purrr", "raster", "RcppTOML", "reticulate", "rgdal", "rmarkdown", "s2", "sass", "sf", "shiny", "stringi", "stringr", "survival", "svglite", "terra", "testthat", "timechange", "tinytex", "units", "vctrs", "wk", "xfun", "zoo"))
install.packages(c("boot", "foreign", "Matrix", "nlme", "survival"), lib="C:/Users/SAW/AppData/Local/Temp/RtmpyyeD6x/renv-system-library")
install.packages(c("bit", "boot", "broom", "bslib", "car", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "foreign", "ggfun", "ggrepel", "glmm", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "lme4", "maptools", "markdown", "Matrix", "minqa", "modelr", "nlme", "nnet", "openssl", "pkgload", "plyr", "png", "purrr", "raster", "RcppTOML", "reticulate", "rgdal", "rmarkdown", "s2", "sass", "sf", "shiny", "stringi", "stringr", "survival", "svglite", "terra", "testthat", "timechange", "tinytex", "units", "vctrs", "wk", "xfun", "zoo"))
install.packages(c("bit", "boot", "broom", "bslib", "car", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "foreign", "ggfun", "ggrepel", "glmm", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "lme4", "maptools", "markdown", "Matrix", "minqa", "modelr", "nlme", "nnet", "openssl", "pkgload", "plyr", "png", "purrr", "raster", "RcppTOML", "reticulate", "rgdal", "rmarkdown", "s2", "sass", "sf", "shiny", "stringi", "stringr", "survival", "svglite", "terra", "testthat", "timechange", "tinytex", "units", "vctrs", "wk", "xfun", "zoo"))
install.packages(c("bit", "boot", "broom", "bslib", "car", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "foreign", "ggfun", "ggrepel", "glmm", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "lme4", "maptools", "markdown", "Matrix", "minqa", "modelr", "nlme", "nnet", "openssl", "pkgload", "plyr", "png", "purrr", "raster", "RcppTOML", "reticulate", "rgdal", "rmarkdown", "s2", "sass", "sf", "shiny", "stringi", "stringr", "survival", "svglite", "terra", "testthat", "timechange", "tinytex", "units", "vctrs", "wk", "xfun", "zoo"))
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# Norwegian and English classifications of WWT technologies
source(file = "src/data_importers/WWT_class_import.R")
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
total_pop_2020 <- pop_by_county_2020 %>%
summarise(sum(Population)) %>%
pull()
pop_share_by_county_2020 <- pop_by_county_2020 %>%
group_by(County_Code) %>%
summarise(County_Code,
Population,
Population_Share = round(Population / total_pop_2020, digits = 2)) %>%
left_join(county_codes, by = "County_Code")
total_pop_2020
pop_by_county_2020
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
# Append county names to the SPL map file, and find centroids for future use
# Append county names to the SPL map
Norway_county_map_names <- Norway_counties_dataframe %>%
left_join(pop_by_county_2020, by = "County_Name")
Norway_counties_dataframe
county_codes <- large_wwtp_by_county_2020 %>%
select(County_Code, County_Name)
write_csv(x = county_codes, file = "data/temp/county_codes.csv")
# Append county names to the SPL map file, and find centroids for future use
# Append county names to the SPL map
Norway_county_map_names <- Norway_counties_dataframe %>%
left_join(county_codes, by = "County_Code") %>%
left_join(pop_by_county_2020, by = "County_Name")
# Find the centroids of counties for better labelling
Norway_county_map_centroids <- Norway_county_map_names %>%
group_by(County_Name) %>%
summarise(lat = mean(range(lat)),
long = mean(range(long)))
Norway_county_map <- ggplot(data = Norway_county_map_names, mapping = aes(x = long,
y = lat)) +
geom_polygon(color = "grey",
linewidth = 0.3,
aes(group = group)) +
theme_void()
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_WWT_map
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(shiny)
library(svglite)
library(scatterpie)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
source(file = "src/graphics/WWTP_share_map.R")
# Norway_county_WWT_map
# ggsave(filename = "output/images/raw/figure02_map_WWT.svg", device = "svg",
#        width = 5, height = 10, units = "cm")
#
# Norway_county_pies_WWT
# ggsave(filename = "output/images/raw/figure02_pies_WWT.svg", device = "svg",
#        width = 20, height = 10, units = "cm")
#
# API_removal_rates_bars
# ggsave(filename = "output/images/raw/figure02_bars_removal.svg", device = "svg",
#        width = 20, height = 5, units = "cm")
# YAH 15:14 - 13/01/2023 - changed the year value in the lm to n - 2000, now
# need to tweak the rest accordingly
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs +
theme_minimal()
ggsave(filename = "output/images/raw/figure03_lm_graphs.svg", device = "svg",
width = 23, height = 12, units = "cm")
# This turned out to be hard to do automatically, so I did it by hand.
# source(file = "src/data_exporters/WWT_share_CPT_exporter.R")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
viridis_colour <- c("viridis", "magma", "plasma", "inferno")[4]
# Set a consistent mapping of RQs to scale values
viridis_RQ_mapping <- Hugin_Data_Output_Tall %>%
select(Risk_Bin) %>%
filter(Risk_Bin %notin% c("true", "false")) %>%
distinct() %>%
pull()
API_labeller <- str_to_title(pull(LMs_API[1]))
names(API_labeller) <- API_labeller
API_labeller <- c(API_labeller, AllAPI = "All APIs")
county_labels <- as_labeller(c(Viken = "Viken (Urban)",
Nordland = "Nordland (Rural)",
Oslo = "Oslo (Urban)",
`Whole Country` = "Whole Country",
API_labeller))
source(file = "src/graphics/RQ_map_year.R")
# Save as SVG for modification
Norway_county_pies_RQ
ggsave(filename = "output/images/raw/figure04a_pies_RQ.svg", device = "svg",
width = 20, height = 10, units = "cm")
Norway_county_RQ_map
ggsave(filename = "output/images/raw/figure04b_map_RQ.svg", device = "svg",
width = 20, height = 10, units = "cm")
Norway_county_bars_RQ <- Norway_county_bars_RQ +
theme(legend.position = "none")
plot_grid(Norway_county_RQ_map, Norway_county_bars_RQ,
align = "v",
nrow = 2, rel_heights = c(2, 1))
ggsave(filename = "output/images/raw/figure04bc_map_bars_RQ.svg", device = "svg",
width = 25, height = 15, units = "cm")
source(file = "src/graphics/WWTP_RQ_bars.R")
WWTP_RQ_bars
ggsave(filename = "output/images/ready/figure05_wwtp_scenario_RQ.png", device = "png",
width = 20, height = 10, units = "cm")
source(file = "src/graphics/pop_scen_RQ_bars.R")
pop_scen_RQ_bars
ggsave(filename = "output/images/ready/figure06_pop_scenario_RQ.png", device = "png",
width = 20, height = 10, units = "cm")
source(file = "src/graphics/combined_risk_bar.R")
combined_RQ_bars
ggsave(filename = "output/images/ready/figure07_combined_RQ.png", device = "png",
width = 23, height = 15, units = "cm")
View(LM_parameters)
View(LMs_API)
# Fit a linear model to explain (and predict) API sales weight (kg) by population (mil) and year
# Set approximate weight sales classes: Light (0-100 kg), Medium (100 - 10000 kg), Heavy (10000 - 1000000 kg)
API_sales_by_population <-
API_sales_weights_1999_2018 %>% left_join(y = Norway_Population_Year, by = c("Year")) %>%
mutate(weight_class = case_when(pmax(Total_Sold_kg) <= 100 ~ "light",
pmax(Total_Sold_kg) <= 10000 ~ "medium",
pmax(Total_Sold_kg) <= 10000000 ~ "heavy"))
# Linear Model: Sales Weight / Population ~ Year
LMs_API <- API_sales_by_population %>%
mutate(Population_mil = Population / 1e6) %>%
filter(Year != 2019, Year != 1999) %>%
group_by(API_Name) %>%
mutate(Year = Year - 2000)
LM_parameters <- tibble()
for (x in unique(LMs_API$API_Name)) {
temp_lm <- lm(data = LMs_API %>% filter(API_Name == x),
formula = Total_Sold_kg/Population_mil ~ Year)
LM_parameters <- bind_rows(LM_parameters, c(API_Name = x, temp_lm$coefficients))
}
LM_parameters <- LM_parameters %>%
transmute(API_Name,
Intercept_kg_per_mpop = as.numeric(`(Intercept)`),
Coeff_kg_per_mpop_per_year = as.numeric(Year)) %>%
# Pop PNECs on the end
left_join(API_PNECs, by = "API_Name")
LM_parameters
