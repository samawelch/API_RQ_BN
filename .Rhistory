advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC)
View(API_removal_rates)
View(API_sales_weights_1999_2018)
API_sales_weights_1999_2018 <- read_csv(file = "data/raw/API_sales_weights_1999_2018.csv",
show_col_types = FALSE)
View(API_sales_weights_1999_2018)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv")
View(temp_API_sales_weights)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv") %>%
group_by(sYear, API_Name) %>%
summarise(Total_Sold_kg = sum(API_Amount_Sold_Value) / 1000)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv") %>%
group_by(sYear, API_Name) %>%
summarise(Total_Sold_kg = sum(API_AmountSoldValue) / 1000)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv",
show_col_types = FALSE)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv",
show_col_types = FALSE) %>%
group_by(sYear, API_Name) %>%
summarise(Total_Sold_kg = sum(API_AmountSoldValue, na.rm = TRUE) / 1000)
temp_API_sales_weights <- read_csv(file = "data/NIPH_DB/NIPH_sales_weights.csv",
show_col_types = FALSE) %>%
group_by(sYear, API_Name) %>%
summarise(Total_Sold_kg = sum(API_AmountSoldValue, na.rm = TRUE) / 1000)
# Import Norwegian Institute for Public Health Wholesale Drug Database data
# censored/summarised to the API level, for 8 APIs, 1999 - 2018
API_sales_weights_1999_2018 <- read_csv(file = "data/raw/API_sales_weights_1999_2018.csv",
show_col_types = FALSE)
API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string)
API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string) %>% distinct()
reprex::reprex(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string) %>% distinct())
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 3:8,
names_to = "treatment_removal_rate")
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 3:7,
names_to = "treatment_removal_rate")
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates_mean <- API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 4:7,
names_to = "treatment_removal_rate")
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates_mean <- API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct()
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment_removal_rate")
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates_mean <- API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment_removal_rate") %>%
add_row() %>%
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment_removal_rate") %>%
add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(mean_removal = mean(value, na.rm = TRUE),
stdev_removal = sd(value, na.rm = TRUE))
)
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment_removal_rate") %>%
add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(treatment_removal_rate = mean(value, na.rm = TRUE))
)
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(treatment_removal_rate = mean(value, na.rm = TRUE))
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment_removal_rate")
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate") %>%
add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment_removal_rate) %>%
summarise(treatment_removal_rate = mean(value, na.rm = TRUE))
)
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate") %>%
add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment) %>%
summarise(removal_rate = mean(value, na.rm = TRUE),
treatment,
InChIKey_string = "mean")
)
API_removal_rates %>%
group_by(treatment) %>%
summarise(removal_rate = mean(value, na.rm = TRUE),
treatment,
InChIKey_string = "mean")
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate")
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate_perc")
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate_perc")
API_removal_rates <- API_removal_rates %>% add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment) %>%
summarise(removal_rate_perc = mean(value, na.rm = TRUE),
treatment,
InChIKey_string = "mean")
)
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate_perc")
API_removal_rates <- API_removal_rates %>% add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment) %>%
summarise(removal_rate_perc = mean(removal_rate_perc, na.rm = TRUE),
treatment,
InChIKey_string = "mean")
)
### Average Removal Rates for ~60 APIs
# Unpublished dataset from Joanke van Dijk
API_removal_rates <- read_excel(path = "data/raw//Removal_efficiencies_JvD.xlsx",
range = "A1:M59") %>%
transmute(InChIKey_string = `InChI Key`,
primary_removal = `Primary (conventional settelers)`,
secondary_removal = `Secondary (biological)`,
tertiary_removal = `Tertiary (e.g. metal salts)`,
advanced_removal = `Advanced treatment (Chlorination, UV)`,
ozone_removal = `Ozone`,
activated_carbon_removal = AC) %>%
distinct() %>%
pivot_longer(cols = 2:7,
names_to = "treatment",
values_to = "removal_rate_perc")
API_removal_rates <- API_removal_rates %>% add_row(
# We'll reuse JvD's assumption that APIs without removal data will be removed
# at the average rate
API_removal_rates %>%
group_by(treatment) %>%
summarise(removal_rate_perc = mean(removal_rate_perc, na.rm = TRUE),
treatment,
InChIKey_string = "mean") %>%
distinct()
)
API_removal_rates
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018, by = "InChIKey_string")
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name), by = "InChIKey_string")
API_sales_weights_1999_2018 %>% select(API_Name)
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string")
source(file = "src/data_importers/WWT_removal_import.R")
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string")
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct()
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct()
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
filter(!is.na(API_Name))
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct()
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean") ~ "mean")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean") ~ "mean") %>%
filter(!is.na(API_Name))
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean")) %>%
filter(!is.na(API_Name))
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean"))
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct()
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
### FK/FASS: API PNECs
API_PNECs <- read.csv(file = "Data/APIs_PBMT_byYear_2022-09-01_12.12.csv") %>%
select(API_Name, PNEC_gL) %>%
distinct()
View(pop_by_county_2020)
total_pop_2020 <- pop_by_county_2020 %>%
summarise(sum(Population)) %>%
pull()
total_pop_2020 <- pop_by_county_2020 %>%
summarise(sum(Population)) %>%
pull()
source(file = "data_processing/pop_share_county.R")
source(file = "src/data_processing/pop_share_county.R")
# renv::init()
# renv::restore()
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# Norwegian and English classifications of WWT technologies
source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
### FK/FASS: API PNECs
API_PNECs <- read.csv(file = "Data/APIs_PBMT_byYear_2022-09-01_12.12.csv") %>%
select(API_Name, PNEC_gL) %>%
distinct()
