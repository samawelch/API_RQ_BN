geom_path() +
facet_wrap(facets = vars(API_Name))
ggsave(filename = "Images/example.svg", device = "svg")
# What's a natural log sequence we can use for API sales weights?
natlog_scale <- 10^log(1:10)
natlog_scale
log(10)
10^log10(1:10)
log(1)
log(2)
log(3)
log(4)
log(5)
log(6)
log(7)
log(100)
10^seq(1:10)
10^seq(log(1:10))
log(1:10)
1^log(1:10)
log(1:10 * 10)
10 ^ log(1:10 * 10)
10 ^ log(1:10)
10 ^ log(1:20)
10 ^ log(1:30)
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
# I'm gonna make some graphs!
# Sales Weight, by year, scenario & API
SW_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](API_Sales_Weight_kg)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
SW_by_Year_Scen_API
# What's going on with these APIs?
Diclofenac_Weird <- Hugin_Data_Output %>%
filter(API_Name == "diclofenac",
WWTP_Removal_Scenario == "0 - 0.001") %>%
dplyr::select(API_Name, Year, `[MEAN](API_Sales_Weight_kg)`, Population_Scenario) %>%
distinct()
# Various PECs
Various_PECS <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](PEC_Inf_gL)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
# RQ by year, scenario & API
RQ_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](RQ)`,
colour = WWTP_Removal_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4) +
scale_color_viridis_d() +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
RQ_by_Year_Scen_API
# Now we're gonna try and make some graphs like Sophie's!
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
# I'm gonna make some graphs!
# Sales Weight, by year, scenario & API
SW_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](API_Sales_Weight_kg)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
SW_by_Year_Scen_API
# What's going on with these APIs?
Diclofenac_Weird <- Hugin_Data_Output %>%
filter(API_Name == "diclofenac",
WWTP_Removal_Scenario == "0 - 0.001") %>%
dplyr::select(API_Name, Year, `[MEAN](API_Sales_Weight_kg)`, Population_Scenario) %>%
distinct()
# Various PECs
Various_PECS <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](PEC_Inf_gL)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
# RQ by year, scenario & API
RQ_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](RQ)`,
colour = WWTP_Removal_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4) +
scale_color_viridis_d() +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
RQ_by_Year_Scen_API
# Now we're gonna try and make some graphs like Sophie's!
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
Various_PECS
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
# I'm gonna make some graphs!
# Sales Weight, by year, scenario & API
SW_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](API_Sales_Weight_kg)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
SW_by_Year_Scen_API
# What's going on with these APIs?
Diclofenac_Weird <- Hugin_Data_Output %>%
filter(API_Name == "diclofenac",
WWTP_Removal_Scenario == "0 - 0.001") %>%
dplyr::select(API_Name, Year, `[MEAN](API_Sales_Weight_kg)`, Population_Scenario) %>%
distinct()
# Various PECs
Various_PECs <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](PEC_Inf_gL)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
Various_PECs
# RQ by year, scenario & API
RQ_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](RQ)`,
colour = WWTP_Removal_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4) +
scale_color_viridis_d() +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
RQ_by_Year_Scen_API
# Now we're gonna try and make some graphs like Sophie's!
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
SW_by_Year_Scen_API
# Various PECs
Various_PECs <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](PEC_Inf_gL)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
Various_PECs
RQ_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](RQ)`,
colour = WWTP_Removal_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4) +
scale_color_viridis_d() +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
RQ_by_Year_Scen_API
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
# I'm gonna make some graphs!
# Sales Weight, by year, scenario & API
SW_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](API_Sales_Weight_kg)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
SW_by_Year_Scen_API
# What's going on with these APIs?
Diclofenac_Weird <- Hugin_Data_Output %>%
filter(API_Name == "diclofenac",
WWTP_Removal_Scenario == "0 - 0.001") %>%
dplyr::select(API_Name, Year, `[MEAN](API_Sales_Weight_kg)`, Population_Scenario) %>%
distinct()
# Various PECs
Various_PECs <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](PEC_Inf_gL)`,
colour = Population_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4, scales = "free") +
scale_color_discrete(breaks = c("Low", "Main", "High")) +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
Various_PECs
# RQ by year, scenario & API
RQ_by_Year_Scen_API <- ggplot(data = Hugin_Data_Output,
mapping = aes(x = Year,
y = `[MEAN](RQ)`,
colour = WWTP_Removal_Scenario,
shape = Population_Scenario)) +
geom_point() +
geom_path() +
facet_wrap(facets = vars(API_Name), ncol = 4) +
scale_color_viridis_d() +
scale_shape_discrete(breaks = c("Low", "Main", "High"))
RQ_by_Year_Scen_API
# Now we're gonna try and make some graphs like Sophie's!
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
ggplot(data = Sales_Projections_Records %>% filter(sYear != 2019),
mapping = aes(x = sYear,
y = Total_Sold_g,
colour = Scenario)) +
geom_path() +
facet_wrap(facets = vars(API_Name))
# What's a natural log sequence we can use for API sales weights?
natlog_scale <- 10 ^ log(1:20)
Various_PECs
SW_by_Year_Scen_API
Various_PECs
RQ_by_Year_Scen_API
RQ_by_Bin
# Make data files for automated data input/output to Hugin
Hugin_Data_File <- LMs_API %>%
left_join(API_PNECs, by = "API_Name") %>%
transmute(API_Name,
API_LM_Coeff = lm_coef,
API_PNEC_gL = PNEC_gL) %>%
# Use vector recycling via crossing to set up the various scenario combinations easily
crossing(Population_Scenario = as_factor(c("Low", "Main", "High")),
Year = c("2020", "2030", "2040", "2050", "2060", "2070", "2080", "2090", "2100"),
WWTP_Removal_Scenario = c("0-0.25", "0.25-0.5", "0.5-0.75", "0.75-1")) %>%
add_column(`[MEAN](Norway_Population_mil)` = NA,
`[MEAN](API_Sales_Weight_kg)` = NA,
`[MEAN](Water_Consumption_ML)` = NA,
`[MEAN](PEC_Inf_gL)` = NA,
`[MEAN](PEC_Eff_gL)` = NA,
`[MEAN](PEC_SW_gL)` = NA,
`[MEAN](RQ)` = NA,
`P(RQ=0-1)` = NA,
`P(RQ=1-10)` = NA,
`P(RQ=10-100)` = NA,
`P(RQ=100-1000)` = NA,
`P(RQ=1000-10000)` = NA,
`P(RQ=10000-inf)` = NA)
write_csv(x = Hugin_Data_File, file = "Data/Hugin/R_to_Hugin_datafile.csv", na = "")
# Hugin has done its thing, so let's import the data
Hugin_Data_Output <- read_csv(file = "Data/Hugin/Hugin_API_Output.csv",
show_col_types = FALSE) %>%
# rename_with(cols = 8:15, ~str_remove(string = ., pattern = "\\[MEAN\\]")) %>%
# rename_with(cols = 8:15, ~str_remove_all(string = ., pattern = "\\W"))
# Need to refactorise population scenarios
mutate(Population_Scenario = fct_relevel(Population_Scenario, c("Low", "Main", "High")),
WWTP_Removal_Scenario = fct_rev(WWTP_Removal_Scenario))
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:22) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
# Now we're gonna try and make some graphs like Sophie's!
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:19) %>%
pivot_longer(cols = 5:13,
names_to = "RQ_Bin",
values_to = "Probability")
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "levonorgestrel") %>%
dplyr::select(1, 4:6, 14:19) %>%
pivot_longer(cols = 5:10,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "plasma", direction = 1)
RQ_by_Bin
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "viridis", direction = -1)
RQ_by_Bin
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "viridis", direction = 1)
RQ_by_Bin
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "rocket", direction = 1)
RQ_by_Bin
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "inferno", direction = 1)
RQ_by_Bin
Sophie_Graph_Data <- Hugin_Data_Output %>%
filter(API_Name == "paracetamol") %>%
dplyr::select(1, 4:6, 14:19) %>%
pivot_longer(cols = 5:10,
names_to = "RQ_Bin",
values_to = "Probability")
# Set up some custom labels for a slightly more sense-making facet
Sophie_Graph_Labeller = c("0-0.25" = "Primary: 0 - 0.25", "0.25-0.5" = "Secondary: 0.25 - 0.5",
"0.5-0.75" = "Tertiary: 0.5 - 0.75", "0.75-1" = "Advanced: 0.75 - 1",
"High" = "High Growth Population",
"Main" = "Main Growth Population",
"Low" = "Low Growth Population")
# Doesn't work right now, will troubleshoot some other time
RQ_by_Bin <- ggplot(data = Sophie_Graph_Data,
mapping = aes(x = Year,
y = Probability,
fill = RQ_Bin)) +
geom_col(position = position_fill(reverse = TRUE)) +
facet_grid(rows = vars(Population_Scenario),
cols = vars(WWTP_Removal_Scenario)) +
scale_fill_viridis_d(option = "inferno", direction = 1)
RQ_by_Bin
