source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
?fct_recode
fct_reorder()
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct_reorder(API_Name, c("Ethinylestradiol", "Estradiol", "Ciprofloxacin",
"Diclofenac", "Ibuprofen", "Paracetamol")))
Sales_Projections_Records
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct_reorder(API_Name, c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
View(Sales_Projections_Records)
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct_reorder(API_Name, c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol",
"levonorgestrel", "amoxicillin")))
Sales_Projections_21C$Sales_Projections_21C
Sales_Projections_21C$API_Name
Sales_Projections_21C$API_Name %>% unique()
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct_reorder(API_Name, c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
rlang::last_error()
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999)
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = as.factor(API_Name, c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = as.factor(API_Name) %>%
fct_inorder(c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
?fct_inorder
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = as.factor(API_Name) %>%
fct_reorder(c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = as.factor(API_Name))
fct_reorder()?fct
?fct
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct(API_Name, levels = c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999) %>%
mutate(API_Name = fct(API_Name, levels = c("ethinylestradiol", "estradiol", "ciprofloxacin",
"diclofenac", "ibuprofen", "paracetamol")))
figure03_lm_graphs <- ggplot(data = Sales_Projections_Records %>% filter(Scenario != "Measured"),
mapping = aes(x = Year,
y = pmax(0, Total_Sold_kg),
colour = Scenario,
shape = Scenario)) +
geom_point(size = 1, stroke = 1.3) +
geom_point(data = Sales_Projections_Records %>%
filter(Scenario == "Measured") %>%
mutate(Year = Year - 2000),
size = 1) +
scale_shape_manual(values = c("Measured" = 16,
"Historic" = 4,
"High national growth (HHH)" = 1,
"Main alternative (MMM)" = 1,
"Low national growth (LLL)" = 1),
limits = c("Measured",
"Historic",
"High national growth (HHH)",
"Main alternative (MMM)",
"Low national growth (LLL)")) +
scale_color_brewer(palette = "Set1",
limits = c("Measured",
"Historic",
"High national growth (HHH)",
"Main alternative (MMM)",
"Low national growth (LLL)")) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = c(0, 10, 20, 30, 40, 50)) +
facet_wrap(facets = vars(API_Name), scales = "free") +
labs(x = "Years After 2000", y = "Total Sold (kg)") +
theme_bw() +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(),
legend.text = element_text(size = 11)) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE),
shape = guide_legend(nrow = 2, byrow = TRUE))
figure03_lm_graphs
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
RQ_Distribts_by_Year_Growth <- Hugin_Data_Output_Tall_Labelled %>%
filter(WWT_Scenario  == "Current",
API_Name %notin% c("Estrogens", "Painkillers"),
Risk_Bin %notin% c("true", "false"),
PGT_Threshold == 100) %>%
mutate(Year_and_Population_Growth = str_remove(Year_and_Population_Growth, " &")) %>%
ggplot(mapping = aes(x = fct_inorder(Year_and_Population_Growth), y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +
facet_grid(rows = vars(API_Name), cols = vars(county)) +
labs(x = "Year", y = "Probability") +
theme_bw()
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
# save a copy of data to output
write_excel_csv(x = Hugin_Data_Output_Tall_Labelled,
file = "output/data/data_output.csv")
RQ_Distribts_by_Year_Growth <- Hugin_Data_Output_Tall_Labelled %>%
filter(WWT_Scenario  == "Current",
API_Name %notin% c("Estrogens", "Painkillers"),
Risk_Bin %notin% c("true", "false"),
PGT_Threshold == 100) %>%
mutate(Year_and_Population_Growth = str_remove(Year_and_Population_Growth, " &")) %>%
ggplot(mapping = aes(x = fct_inorder(Year_and_Population_Growth), y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +
facet_grid(rows = vars(API_Name), cols = vars(county)) +
labs(x = "Year", y = "Probability") +
theme_bw()
RQ_Distribts_by_Year_Growth
RQ_Distribts_by_Year_Growth
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
# save a copy of data to output
write_excel_csv(x = Hugin_Data_Output_Tall_Labelled,
file = "output/data/data_output.csv")
## Figure 05 ##
source(file = "src/graphics/RQ_yeargrowth_bars.R")
RQ_Distribts_by_Year_Growth
# 7:8 Aspect Ratio to keep API names in full view
ggsave(filename = "output/images/ready/figure05_yeargrowth_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 06 ##
source(file = "src/graphics/WWTP_RQ_bars.R")
WWTP_RQ_bars
ggsave(filename = "output/images/ready/figure06_wwtp_scenario_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 07 ##
source(file = "src/graphics/combined_vs_join_prob.R")
combined_join_comparison_bars
ggsave(filename = "output/images/ready/figure07_combined_vs_joint_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
