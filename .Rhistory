# Norway_county_boxplot_ww
Norway_county_boxplot_wwt <-
ggplot(data = Norway_County_General_2020, mapping = aes(x = urb_quantile, y = Arbitrary_WWT_Index)) +
geom_point(aes(colour = Type, shape = exemplar), size = 3, stroke = 2) +
scale_shape_manual(values = c(1, 16)) +
scale_colour_brewer(palette = "Paired") +
geom_boxplot(alpha = 0) +
theme_bw() +
theme(legend.position = "none") +
labs(title = "(e)",
y = str_wrap("Arbitrary Wastewater Treatment Index"), width = 30) +
coord_flip()
# Norway_county_boxplot_wwt
Norway_county_boxplots <- plot_grid(Norway_county_boxplot_urb,
Norway_county_boxplot_pop,
Norway_county_boxplot_ww,
Norway_county_boxplot_wwt,
nrow = 2)
Norway_county_graphic <- plot_grid(Norway_county_map,
Norway_county_boxplots,
nrow = 1,
rel_widths = c(1.5, 1.5),
align = "h")
Norway_county_graphic
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
Norway_county_boxplot_urb <-
ggplot(data = Norway_County_General_2020, mapping = aes(x = urb_quantile, y = pop_urban)) +
geom_point(aes(colour = Type, shape = exemplar), size = 3, stroke = 2) +
scale_shape_manual(values = c(1, 16)) +
scale_colour_brewer(palette = "Paired") +
geom_boxplot(alpha = 0) +
theme_bw() +
theme(legend.position = "none", axis.title.y = element_blank()) +
labs(title = "(b)",
y = "Urban Population Proportion") +
coord_flip()
Norway_county_boxplot_urb
Norway_County_General_2020 <- Norway_County_General_2020 %>%
mutate(Pop_mil = Population / 1e6,
urb_quantile = str_replace_all(urb_quantile, c(Urban = "U",
`Semi-Urban` = "SU",
Rural = "R")))
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
---
title: "Bayesian Network Environmental Risk Assessment of Pharmaceuticals"
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.2)
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.4)
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
# Make a set of graphs of predicted sales weights using the lm under different populatio scenarios.
# Recalculate sales weights from the LM for comparison
Sales_Projections_21C <-
crossing(LM_parameters, Norway_Pop_Discretisation) %>%
mutate(Year = Year - 2000) %>%
mutate(Sales_Proj_kg = (Year * Coeff_kg_per_mpop_per_year + Intercept_kg_per_mpop)
* Pop_mil_disc) %>%
filter(Year %in% c(10, 20, 30, 40, 50))
# Join projections and records together to plot on one graph
Sales_Projections_Records <- Sales_Projections_21C %>%
transmute(API_Name,
Total_Sold_kg = Sales_Proj_kg,
Scenario,
Year) %>%
add_row(API_sales_weights_1999_2018 %>% transmute(API_Name,
Year,
Total_Sold_kg,
Scenario = "Measured")) %>%
filter(Year != 2019, Year != 1999)
figure03_lm_graphs <- ggplot(data = Sales_Projections_Records %>% filter(Scenario != "Measured"),
mapping = aes(x = Year,
y = pmax(0, Total_Sold_kg),
colour = Scenario,
shape = Scenario)) +
geom_point(size = 1, stroke = 1.3) +
geom_point(data = Sales_Projections_Records %>%
filter(Scenario == "Measured") %>%
mutate(Year = Year - 2000),
size = 1) +
scale_shape_manual(values = c("Measured" = 16,
"Historic" = 4,
"High national growth (HHH)" = 1,
"Main alternative (MMM)" = 1,
"Low national growth (LLL)" = 1),
limits = c("Measured",
"Historic",
"High national growth (HHH)",
"Main alternative (MMM)",
"Low national growth (LLL)")) +
scale_color_brewer(palette = "Set1",
limits = c("Measured",
"Historic",
"High national growth (HHH)",
"Main alternative (MMM)",
"Low national growth (LLL)")) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = c(0, 10, 20, 30, 40, 50)) +
facet_wrap(facets = vars(API_Name), scales = "free") +
labs(x = "Years After 2000", y = "Total Sold (kg)") +
theme_bw() +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(),
legend.text = element_text(size = 14)) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE),
shape = guide_legend(nrow = 2, byrow = TRUE))
figure03_lm_graphs
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
library(ggplot)
library(ggplot2)
library(ragg)
ggplot(mtcars)
mtcars
ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, holour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
agg_png(file, width = 1000, height = 500, res = 144)
agg_png(filename = "output/images/ready/cars.png", width = 1000, height = 500, res = 144)
ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨ ") +
theme(text = element_text(family = "Paddington"))
test
library(ggplot2)
library(ragg)
agg_png(filename = "output/images/ready/cars.png", width = 1000, height = 500, res = 144)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
test
?agg_png
library(ggplot2)
library(ragg)
agg_png(filename = "output/images/ready/cars.png", width = 1000,
height = 500,
res = 144,
scaling = 0.5)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 0.5)
test
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 100)
test
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 100)
test
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 100)
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 10)
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 5)
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 5)
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 1)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 1)
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 1)
test
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 1)
test
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 1)
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 2)
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 2)
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 2)
test
test
# use agg_png more or less like ggsave
agg_png(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
res = 144,
scaling = 2)
test
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl))
test
test <- ggplot(mtcars)
test
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
ggplot(mtcars)
ggplot(mtcars)
library(ggplot2)
library(ragg)
ggplot(mtcars)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
library(ggplot2)
library(ragg)
test <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, colour = cyl)) +
labs(title = "ðŸš—ðŸ’¨") +
theme(text = element_text(family = "Paddington"))
test
?ggsave()
test
# use agg_png more or less like ggsave
ggsave(filename = "output/images/ready/cars.png",
width = 1000,
height = 500,
dpi = 300,
scaling = 2)
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 50,
units = "cm"
dpi = 300,
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 50,
units = "cm",
dpi = 300,
scaling = 2)
ggsave(filename = "output/images/ready/cars.png",
width = 100,
height = 50,
units = "cm",
dpi = 300,
scaling = 2)
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 5,
units = "cm",
dpi = 300,
scaling = 2)
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 5,
units = "cm",
dpi = 300,
scaling = 1)
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 5,
units = "cm",
dpi = 300,
dev = agg_png,
scaling = 1)
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 5,
units = "cm",
dpi = 300,
dev = agg_png,
scaling = 2)
test
# use agg_png more or less like ggsave
ggsave(filename = "output/images/ready/cars.png",
width = 10,
height = 5,
units = "cm",
dpi = 300,
dev = agg_png,
scaling = 2)
library(tibble)
library(stringr)
animals <- tibble(animal = c("cat", "dog", "rabbit", aesthetic_points = c(10, 7, 6)))
library(dplyr)
lookup <- tibble(common_name = c("cat", "dog", "rabbit",
scientific_name = c("felis domesticus", "Canis familiaris", "oryctolagus cuniculus"))) %>%
# convert a two-column dataframe to a named vector
deframe()
animals %>% mutate(animal = str_replace_all(animal, lookup))
animals %>% mutate(animal = str_replace_all(animal, replacement =  lookup))
animals %>% mutate(animal = str_replace_all(animal, lookup))
animals
View(animals)
lookup <- tibble(common_name = c("cat", "dog", "rabbit"),
scientific_name = c("felis domesticus", "Canis familiaris", "oryctolagus cuniculus")) %>%
# convert a two-column dataframe to a named vector
deframe()
animals <- tibble(animal = c("cat", "dog", "rabbit"),
aesthetic_points = c(10, 7, 6))
animals %>% mutate(animal = str_replace_all(animal, lookup))
library(tibble)
library(stringr)
library(dplyr)
lookup <- tibble(common_name = c("cat", "dog", "rabbit"),
scientific_name = c("felis domesticus", "canis familiaris", "oryctolagus cuniculus"))
animals <- tibble(animal = c("cat", "dog", "rabbit"),
aesthetic_points = c(10, 7, 6))
animals %>% mutate(animal = str_replace_all(animal, lookup))
