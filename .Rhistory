units = "cm",
dpi = 300,
dev = agg_png,
scaling = 2)
library(tibble)
library(stringr)
animals <- tibble(animal = c("cat", "dog", "rabbit", aesthetic_points = c(10, 7, 6)))
library(dplyr)
lookup <- tibble(common_name = c("cat", "dog", "rabbit",
scientific_name = c("felis domesticus", "Canis familiaris", "oryctolagus cuniculus"))) %>%
# convert a two-column dataframe to a named vector
deframe()
animals %>% mutate(animal = str_replace_all(animal, lookup))
animals %>% mutate(animal = str_replace_all(animal, replacement =  lookup))
animals %>% mutate(animal = str_replace_all(animal, lookup))
animals
View(animals)
lookup <- tibble(common_name = c("cat", "dog", "rabbit"),
scientific_name = c("felis domesticus", "Canis familiaris", "oryctolagus cuniculus")) %>%
# convert a two-column dataframe to a named vector
deframe()
animals <- tibble(animal = c("cat", "dog", "rabbit"),
aesthetic_points = c(10, 7, 6))
animals %>% mutate(animal = str_replace_all(animal, lookup))
library(tibble)
library(stringr)
library(dplyr)
lookup <- tibble(common_name = c("cat", "dog", "rabbit"),
scientific_name = c("felis domesticus", "canis familiaris", "oryctolagus cuniculus"))
animals <- tibble(animal = c("cat", "dog", "rabbit"),
aesthetic_points = c(10, 7, 6))
animals %>% mutate(animal = str_replace_all(animal, lookup))
# Cities of 50,000+ only
Norway_Cities %>% filter(population > 50000) %>%
summarise(sum(population))
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(svglite)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Cities of 50,000+ only
Norway_Cities %>% filter(population > 50000) %>%
summarise(sum(population))
# This covers only 2.1 million people, not even half of the population
# Removing the filter covers 4.3 million people, which is better...
Norway_county_cities_map <- ggplot(data = Norway_county_map_names, mapping = aes(x = long,
y = lat)) +
geom_polygon(color = "grey",
size = 0.1,
aes(group = group,
fill = Population)) +
scale_fill_distiller(type = "seq",
direction = 1,
palette = "Greys") +
geom_text_repel(data = Norway_county_map_centroids,
size = 4,
alpha = 0.5,
mapping = aes(label = County_Name),) +
geom_point(data = Norway_Cities %>% filter(population > 50000),
alpha = 1,
colour = "red",
aes(size = population)) +
geom_label_repel(data = Norway_Cities %>% filter(population > 50000),
mapping = aes(label = city))
# Graph population over time, and discretisation thereof, in an admittedly awful plot
ggplot(data = Norway_Pop_Discretisation %>% filter(Year >= 2000),
mapping = aes(x = Year,
y = Pop_mil,
colour = Scenario)) +
geom_point() +
geom_line(aes(y = Pop_mil_disc)) +
scale_colour_discrete(limits = c("Historic",
"Low national growth (LLL)",
"Main alternative (MMM)",
"High national growth (HHH)"))
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin",
option = viridis_colour,
limits = viridis_RQ_mapping,
guide = guide_legend(reverse = TRUE)) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", guide = guide_legend(reverse = TRUE)) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county),
labeller = county_labels) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars <- Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
master_county %in% c("Nordland", "Viken", "Whole Country"),
Risk_Bin %notin% c("true", "false"),
API_Name %in% c("Diclofenac", "AllAPI")) %>%
mutate(master_county = factor(master_county, levels = c("Nordland", "Viken", "Whole Country"))) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", guide = guide_legend(reverse = TRUE)) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county)) +
scale_x_discrete(limits = c("Low", "Main", "High")) +
labs(x = "Population Growth Scenario, 2050")
pop_scen_RQ_bars
Hugin_Data_Output_Tall %>%
filter(master_WWT_scenario == "Current",
master_year == 2050,
Risk_Bin %notin% c("true", "false")) %>%
ggplot(aes(x = master_pop_scenario, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col(position = "stack") +
scale_fill_viridis_d("RQ Bin", guide = guide_legend(reverse = TRUE)) +
facet_grid(rows = vars(API_Name),
cols = vars(master_county)) +
scale_x_discrete(labels = c("L" = "Low", "M" = "Main", "H" = "High")) +
labs(x = "Population Growth Scenario, 2050")
combined_RQ_bars <- Hugin_Data_Output_Tall_Labelled %>%
filter(WWT_Scenario  == "Best (all tertiary)",
API_Name %notin% c("Estrogens", "Painkillers"),
Risk_Bin %in% c("true", "false")) %>%
ggplot(aes(x = WWT_Scenario, y = Probability, fill = Risk_Bin)) +
scale_fill_brewer(palette = "RdYlBu", name = "RQ Interval", direction = -1) +
geom_col(position = "stack") +
facet_grid(cols = vars(county)) +
scale_x_discrete() +
labs(x = "WWT Scenario (2050)") +
theme(axis.text.x = element_text(angle = 90, vjust = -0.0001))
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(svglite)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
# save a copy of data to output
write_excel_csv(x = Hugin_Data_Output_Tall_Labelled,
file = "output/data/data_output.csv")
## Figure 05 ##
source(file = "src/graphics/RQ_yeargrowth_bars.R")
RQ_Distribts_by_Year_Growth
# 7:8 Aspect Ratio to keep API names in full view
ggsave(filename = "output/images/ready/figure05_yeargrowth_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 06 ##
source(file = "src/graphics/WWTP_RQ_bars.R")
WWTP_RQ_bars
ggsave(filename = "output/images/ready/figure06_wwtp_scenario_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 07 ##
source(file = "src/graphics/combined_vs_join_prob.R")
combined_join_comparison_bars
ggsave(filename = "output/images/ready/figure07_combined_vs_joint_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
# Summarise share of total population by county (2020)
source(file = "src/data_processing/pop_share_county.R")
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
# Leaflet stuff
library(splmaps)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(svglite)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# # Norwegian and English classifications of WWT technologies
# source(file = "src/data_importers/WWT_class_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Summarise share of total population by county (2020)
# source(file = "src/data_processing/pop_share_county.R")
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
# save a copy of data to output
write_excel_csv(x = Hugin_Data_Output_Tall_Labelled,
file = "output/data/data_output.csv")
## Figure 05 ##
source(file = "src/graphics/RQ_yeargrowth_bars.R")
RQ_Distribts_by_Year_Growth
# 7:8 Aspect Ratio to keep API names in full view
ggsave(filename = "output/images/ready/figure05_yeargrowth_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 06 ##
source(file = "src/graphics/WWTP_RQ_bars.R")
WWTP_RQ_bars
ggsave(filename = "output/images/ready/figure06_wwtp_scenario_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 07 ##
source(file = "src/graphics/combined_vs_join_prob.R")
combined_join_comparison_bars
ggsave(filename = "output/images/ready/figure07_combined_vs_joint_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 07 ##
source(file = "src/graphics/combined_vs_join_prob.R")
combined_join_comparison_bars
ggsave(filename = "output/images/ready/figure07_combined_vs_joint_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
# library(svglite)
library(scico)
library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
Norway_county_graphic
ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
width = 30, height = 20, units = "cm", res = 300,
scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
source(file = "src/data_importers/Hugin_to_R_importer.R")
# save a copy of data to output
write_excel_csv(x = Hugin_Data_Output_Tall_Labelled,
file = "output/data/data_output.csv")
## Figure 05 ##
source(file = "src/graphics/RQ_yeargrowth_bars.R")
RQ_Distribts_by_Year_Growth
# 7:8 Aspect Ratio to keep API names in full view
ggsave(filename = "output/images/ready/figure05_yeargrowth_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 06 ##
source(file = "src/graphics/WWTP_RQ_bars.R")
WWTP_RQ_bars
ggsave(filename = "output/images/ready/figure06_wwtp_scenario_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
## Figure 07 ##
source(file = "src/graphics/combined_vs_join_prob.R")
combined_join_comparison_bars
ggsave(filename = "output/images/ready/figure07_combined_vs_joint_RQ.png", device = "png",
width = 20, height = 20, units = "cm")
# Setup Renv for reproducible packages
# renv::init()
# renv::restore()
options(renv.download.override = utils::download.file)
# Update to a new version of R
# renv::upgrade()
# renv::hydrate(update = "all") # populates the renv cache with copies of up to
#                               # date package versions, needed by the project
#   # renv::update() should have no effect now, but running it as well won't harm
#   # to check that all packages are indeed up to date
# renv::snapshot() # inspect the message before confirming to overwrite renv.lock
# Library
library(tidyverse)
library(splmaps)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
# library(cowplot)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
source(file = "src/data_processing/map_preparation.R")
library(ragg)
## Figure 02 ##
source(file = "src/graphics/WWTP_share_map.R")
