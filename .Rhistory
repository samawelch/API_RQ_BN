LM_Predictions |> group_by(weight_class) |> reframe(g_per_capita_CI_95_lower = min(CI_95_lower),
g_per_capita_CI_95_upper = max(CI_95_upper)) |>
# Estimate bounds for total kg sold
mutate(weight_class = factor(weight_class, c("light", "medium", "heavy")),
Min_Pop = 0.1,
Max_Pop = 1.7,
# Technically this is inadequate for negative estradiol sales, but I don't think we care
# about that level of precision below 0
kg_total_CI_95_lower = (g_per_capita_CI_95_lower * 1e-3) * (Min_Pop * 1e6),
kg_total_CI_95_upper = (g_per_capita_CI_95_upper * 1e-3) * (Max_Pop * 1e6)) |>
arrange(weight_class) |>
# Estimate bounds for PEC_influent (ug)
mutate(Max_Wastewater = 80,
Min_Wastewater = 10,
# To get minimum values, minimise mass & maximise dilution
PEC_inf_ugL_CI_95_lower = (kg_total_CI_95_lower * 1e9) / (Max_Wastewater * 1e9),
# and vice verse
PEC_inf_ugL_CI_95_upper = (kg_total_CI_95_upper * 1e9) / (Min_Wastewater * 1e9)) |>
# Estimate bounds for PEC_effluent (ug)
mutate(Max_Removal = 0.85,
Min_Removal = 0.15,
PEC_eff_ugL_CI_95_lower = PEC_inf_ugL_CI_95_lower * (1 - Max_Removal),
PEC_eff_ugL_CI_95_upper = PEC_inf_ugL_CI_95_upper * (1 - Min_Removal)) |>
# Estimate bounds for PEC_SW (ug)
mutate(PEC_sw_ugL_CI_95_lower = PEC_eff_ugL_CI_95_lower / 10,
PEC_sw_ugL_CI_95_upper = PEC_eff_ugL_CI_95_upper / 10) |>
# Add PNECs
mutate(PNEC_API_E2_diclo_ibu = c(1.8e-04, 4.0e-02, 1.4e-01),
PNEC_API_EE2_cipro_para = c(3.2e-06, 1.0e-01, 1.0e+01))
test <- LM_Predictions |> group_by(weight_class) |> reframe(g_per_capita_CI_95_lower = min(CI_95_lower),
g_per_capita_CI_95_upper = max(CI_95_upper)) |>
# Estimate bounds for total kg sold
mutate(weight_class = factor(weight_class, c("light", "medium", "heavy")),
Min_Pop = 0.1,
Max_Pop = 1.7,
# Technically this is inadequate for negative estradiol sales, but I don't think we care
# about that level of precision below 0
kg_total_CI_95_lower = (g_per_capita_CI_95_lower * 1e-3) * (Min_Pop * 1e6),
kg_total_CI_95_upper = (g_per_capita_CI_95_upper * 1e-3) * (Max_Pop * 1e6)) |>
arrange(weight_class) |>
# Estimate bounds for PEC_influent (ug)
mutate(Max_Wastewater = 80,
Min_Wastewater = 10,
# To get minimum values, minimise mass & maximise dilution
PEC_inf_ugL_CI_95_lower = (kg_total_CI_95_lower * 1e9) / (Max_Wastewater * 1e9),
# and vice verse
PEC_inf_ugL_CI_95_upper = (kg_total_CI_95_upper * 1e9) / (Min_Wastewater * 1e9)) |>
# Estimate bounds for PEC_effluent (ug)
mutate(Max_Removal = 0.85,
Min_Removal = 0.15,
PEC_eff_ugL_CI_95_lower = PEC_inf_ugL_CI_95_lower * (1 - Max_Removal),
PEC_eff_ugL_CI_95_upper = PEC_inf_ugL_CI_95_upper * (1 - Min_Removal)) |>
# Estimate bounds for PEC_SW (ug)
mutate(PEC_sw_ugL_CI_95_lower = PEC_eff_ugL_CI_95_lower / 10,
PEC_sw_ugL_CI_95_upper = PEC_eff_ugL_CI_95_upper / 10) |>
# Add PNECs
mutate(PNEC_API_E2_diclo_ibu = c(1.8e-04, 4.0e-02, 1.4e-01),
PNEC_API_EE2_cipro_para = c(3.2e-06, 1.0e-01, 1.0e+01))
View(test)
# How do we get the maximum and minimum possible (or at least 95% possible) values for each node
# First, get the highest & lowest 95 CI for g per capita
test <- LM_Predictions |> group_by(weight_class) |> reframe(g_per_capita_CI_95_lower = min(CI_95_lower),
g_per_capita_CI_95_upper = max(CI_95_upper)) |>
# Estimate bounds for total kg sold
mutate(weight_class = factor(weight_class, c("light", "medium", "heavy")),
Min_Pop = 0.1,
Max_Pop = 1.7,
# Technically this is inadequate for negative estradiol sales, but I don't think we care
# about that level of precision below 0
kg_total_CI_95_lower = (g_per_capita_CI_95_lower * 1e-3) * (Min_Pop * 1e6),
kg_total_CI_95_upper = (g_per_capita_CI_95_upper * 1e-3) * (Max_Pop * 1e6)) |>
arrange(weight_class) |>
# Estimate bounds for PEC_influent (ug)
mutate(Max_Wastewater = 80,
Min_Wastewater = 10,
# To get minimum values, minimise mass & maximise dilution
PEC_inf_ugL_CI_95_lower = (kg_total_CI_95_lower * 1e9) / (Max_Wastewater * 1e9),
# and vice verse
PEC_inf_ugL_CI_95_upper = (kg_total_CI_95_upper * 1e9) / (Min_Wastewater * 1e9)) |>
# Estimate bounds for PEC_effluent (ug)
mutate(Max_Removal = 0.85,
Min_Removal = 0.15,
PEC_eff_ugL_CI_95_lower = PEC_inf_ugL_CI_95_lower * (1 - Max_Removal),
PEC_eff_ugL_CI_95_upper = PEC_inf_ugL_CI_95_upper * (1 - Min_Removal)) |>
# Estimate bounds for PEC_SW (ug)
mutate(PEC_sw_ugL_CI_95_lower = PEC_eff_ugL_CI_95_lower / 10,
PEC_sw_ugL_CI_95_upper = PEC_eff_ugL_CI_95_upper / 10) |>
# Add PNECs
mutate(PNEC_API_E2_diclo_ibu = c(1.8e-04, 4.0e-02, 1.4e-01),
PNEC_API_EE2_cipro_para = c(3.2e-06, 1.0e-01, 1.0e+01))
# Estimate bounds for RQ
mutate(RQ_CI_95_lower = PEC_sw_ugL_CI_95_lower / pmax(PNEC_API_E2_diclo_ibu, PNEC_API_EE2_cipro_para),
RQ_CI_95_upper = PEC_sw_ugL_CI_95_upper / pmin(PNEC_API_E2_diclo_ibu, PNEC_API_EE2_cipro_para))
# How do we get the maximum and minimum possible (or at least 95% possible) values for each node
# First, get the highest & lowest 95 CI for g per capita
test <- LM_Predictions |> group_by(weight_class) |> reframe(g_per_capita_CI_95_lower = min(CI_95_lower),
g_per_capita_CI_95_upper = max(CI_95_upper)) |>
# Estimate bounds for total kg sold
mutate(weight_class = factor(weight_class, c("light", "medium", "heavy")),
Min_Pop = 0.1,
Max_Pop = 1.7,
# Technically this is inadequate for negative estradiol sales, but I don't think we care
# about that level of precision below 0
kg_total_CI_95_lower = (g_per_capita_CI_95_lower * 1e-3) * (Min_Pop * 1e6),
kg_total_CI_95_upper = (g_per_capita_CI_95_upper * 1e-3) * (Max_Pop * 1e6)) |>
arrange(weight_class) |>
# Estimate bounds for PEC_influent (ug)
mutate(Max_Wastewater = 80,
Min_Wastewater = 10,
# To get minimum values, minimise mass & maximise dilution
PEC_inf_ugL_CI_95_lower = (kg_total_CI_95_lower * 1e9) / (Max_Wastewater * 1e9),
# and vice verse
PEC_inf_ugL_CI_95_upper = (kg_total_CI_95_upper * 1e9) / (Min_Wastewater * 1e9)) |>
# Estimate bounds for PEC_effluent (ug)
mutate(Max_Removal = 0.85,
Min_Removal = 0.15,
PEC_eff_ugL_CI_95_lower = PEC_inf_ugL_CI_95_lower * (1 - Max_Removal),
PEC_eff_ugL_CI_95_upper = PEC_inf_ugL_CI_95_upper * (1 - Min_Removal)) |>
# Estimate bounds for PEC_SW (ug)
mutate(PEC_sw_ugL_CI_95_lower = PEC_eff_ugL_CI_95_lower / 10,
PEC_sw_ugL_CI_95_upper = PEC_eff_ugL_CI_95_upper / 10) |>
# Add PNECs
mutate(PNEC_API_E2_diclo_ibu = c(1.8e-04, 4.0e-02, 1.4e-01),
PNEC_API_EE2_cipro_para = c(3.2e-06, 1.0e-01, 1.0e+01)) |>
# Estimate bounds for RQ
mutate(RQ_CI_95_lower = PEC_sw_ugL_CI_95_lower / pmax(PNEC_API_E2_diclo_ibu, PNEC_API_EE2_cipro_para),
RQ_CI_95_upper = PEC_sw_ugL_CI_95_upper / pmin(PNEC_API_E2_diclo_ibu, PNEC_API_EE2_cipro_para))
1e9
3.039303e-03 * 1e6
(3.039303e-03 * 1e6) / 10e9
(0.17 * 1e9) / (15 * 1e9)
(0.17 * 1e9) / (15 * 1e9) * (1 - 0.5)
((0.17 * 1e9) / (15 * 1e9) * (1 - 0.5)) / 3.2e-6
2.08e-3 / 3.2e-6
0.02 * (1 - 0.5)
1.21 / 15
1.21 / 55
source(file = "src/data_processing/R_to_Hugin.R")
# Library
library(tidyverse)
library(readxl)
library(glue)
library(rgdal)
options("rgdal_show_exportToProj4_warnings"="none")
library(sf)
library(cowplot)
library(ggpmisc)
library(here)
`%notin%` <- negate(`%in%`)
# Disable summarise informative message:
options(dplyr.summarise.inform = FALSE)
knitr::opts_knit$set(root.dir = here::here())
getwd()
getwd()
# Various Statistics Norway datasets
source(file = "src/data_importers/statistics_norway_import.R")
# SPL maps from the Norwegian Institute for Public Health
# source(file = "src/data_importers/spl_map_import.R")
# Sales weights for 8 high-risk APIs, adapted from NIPH data
source(file = "src/data_importers/API_sales_import.R")
# Filter to the 6 APIs used in the Bayesian Network
analysed_APIs <- c("estradiol", "ethinylestradiol", "diclofenac",
"ibuprofen", "paracetamol", "ciprofloxacin")
API_sales_weights_1999_2018 <- API_sales_weights_1999_2018 %>%
filter(API_Name %in% analysed_APIs)
# API PNECs from various sources
source(file = "src/data_importers/API_PNEC_import.R")
# van Dijk et al.'s unpublished pharmaceutical removal rates dataset
source(file = "src/data_importers/WWT_removal_import.R")
# match names using InChIKeys and filter results
API_removal_rates <- API_removal_rates %>%
left_join(API_sales_weights_1999_2018 %>% select(API_Name, InChIKey_string),
by = "InChIKey_string") %>%
distinct() %>%
mutate(API_Name = case_when(InChIKey_string == "mean" ~ "mean",
TRUE ~ API_Name)) %>%
filter(!is.na(API_Name))
# Discretise population for diagnostic/summary graphs
source(file = "src/data_processing/pop_discretisation_Norway.R")
# Set up a base map of Norway
# source(file = "src/data_processing/map_preparation.R")
# library(ragg)
# ## Figure 02 ##
# # source(file = "src/graphics/WWTP_share_map.R")
#
# Norway_county_graphic
#
# ggsave(filename = "output/images/ready/figure02_counties.png", device = agg_png,
#        width = 30, height = 20, units = "cm", res = 300,
#        scaling = 1.3)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
library(ragg)
## Figure 03 ##
# Fit linear models to sales data, and predict future sales from models
source(file = "src/data_processing/API_sales_LM.R")
# Graph out predictions from LMs
source(file = "src/graphics/sales_prediction_graph.R")
figure03_lm_graphs
ggsave(filename = "output/images/ready/figure03_lm_graphs.png", device = agg_png,
width = 23, height = 12, units = "cm", dpi = 300,
scaling = 1.2)
# Table 03
write_excel_csv(x = LM_parameters, file = "output/tables/tab_03_lm_params.csv")
source(file = "src/data_processing/R_to_Hugin.R")
hugin_output_light <- read_csv("data/Hugin/Hugin_to_R_datafile_light_only.csv")
View(hugin_output_light)
hugin_output_light_tall <- hugin_output_light |>
select(-c(2:3))
View(hugin_output_light_tall)
hugin_output_light_tall <- hugin_output_light |>
select(-c(2:3)) |>
pivot_longer(cols = 3:21,
names_to = "Risk_Bin_String",
values_to = "Probability")
hugin_output_light <- read_csv("data/Hugin/Hugin_to_R_datafile_light_only.csv")
# Pivot light hugin output
hugin_output_light_tall <- hugin_output_light |>
select(-c(2:3)) |>
pivot_longer(cols = 3:21,
names_to = "Risk_Bin_String",
values_to = "Probability") |>
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = case_when(Risk_Type == "PRQ_GT_n" ~ str_extract(Risk_Bin_String,
pattern = "GT_n_[0-9]"),
TRUE ~ str_extract(Risk_Bin_String,
pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"))) %>%
mutate(API_Name = str_replace(API_Name, "AllAPI", "ΣRQ")) %>%
mutate(Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+"),
API_Name = fct_relevel(API_Name, c("ethinylestradiol", "estradiol"))) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
hugin_output_light <- read_csv("data/Hugin/Hugin_to_R_datafile_light_only.csv")
# Pivot light hugin output
hugin_output_light_tall <- hugin_output_light |>
select(-c(2:3)) |>
pivot_longer(cols = 3:21,
names_to = "Risk_Bin_String",
values_to = "Probability") |>
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = case_when(Risk_Type == "PRQ_GT_n" ~ str_extract(Risk_Bin_String,
pattern = "GT_n_[0-9]"),
TRUE ~ str_extract(Risk_Bin_String,
pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"))) %>%
mutate(API_Name = str_replace(API_Name, "AllAPI", "ΣRQ")) %>%
mutate(Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+"),
API_Name = fct_relevel(API_Name, c("ethinylestradiol", "estradiol"))) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
scenario_number_labels = tibble(county = c("Troms & Finnmark (Rural)", "Trøndelag (Semi-Urban)", "Viken (Urban)")) %>%
crossing(Year_and_Population_Growth = fct_inorder(c("2020 & None", "2050 & Low",
"2050 & Main", "2050 & High")),
WWT_Scenario = fct_inorder(c("Current", "Secondary or better", "Best (all tertiary)"))) %>%
mutate(Scenario_Number = row_number()) %>%
relocate(Scenario_Number, 1)
# When was the dataset last updated?
Hugin_Output_Last_Updated <- file.info("Data/Hugin/Hugin_to_R_datafile.csv")$mtime
hugin_output_light_tall_labelled <- hugin_output_light_tall %>%
left_join(scenario_number_labels, by = c("scenario_number" = "Scenario_Number")) %>%
relocate(county, Year_and_Population_Growth, WWT_Scenario, .after = scenario_number)
View(hugin_output_light_tall_labelled)
# Graphical interpretation
WWTP_RQ_bars <- Hugin_Data_Output_Tall_Labelled %>%
filter(Year_and_Population_Growth == "2050 & Main") %>%
ggplot(aes(x = WWT_Scenario, y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name),
cols = vars(county)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main") %>%
ggplot(aes(x = WWT_Scenario, y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name),
cols = vars(county)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars
hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main")
temp <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main")
View(temp)
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main") %>%
distinct() |>
ggplot(aes(x = WWT_Scenario, y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name),
cols = vars(county)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
hugin_output_light_tall_labelled
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
hugin_output_light <- read_csv("data/Hugin/Hugin_to_R_datafile_light_only.csv")
# Pivot light hugin output
hugin_output_light_tall <- hugin_output_light |>
select(-c(2:3)) |>
pivot_longer(cols = 2:21,
names_to = "Risk_Bin_String",
values_to = "Probability") |>
mutate(Risk_Type = str_remove(Risk_Bin_String, pattern = "_[^_]+$") %>%
str_remove(pattern = "P\\("),
API_Name = case_when(Risk_Type == "PRQ_GT_n" ~ str_extract(Risk_Bin_String,
pattern = "GT_n_[0-9]"),
TRUE ~ str_extract(Risk_Bin_String,
pattern = "(?<=\\_)([[:alpha:]]*?)(?=\\=)"))) %>%
mutate(API_Name = str_replace(API_Name, "AllAPI", "ΣRQ")) %>%
mutate(Risk_Bin = str_extract(Risk_Bin_String, pattern = "(?<==).[a-zA-Z0-9-]+"),
API_Name = fct_relevel(API_Name, c("ethinylestradiol", "estradiol"))) %>%
select(-Risk_Bin_String) %>%
relocate(Probability, .after = last_col())
scenario_number_labels = tibble(county = c("Troms & Finnmark (Rural)", "Trøndelag (Semi-Urban)", "Viken (Urban)")) %>%
crossing(Year_and_Population_Growth = fct_inorder(c("2020 & None", "2050 & Low",
"2050 & Main", "2050 & High")),
WWT_Scenario = fct_inorder(c("Current", "Secondary or better", "Best (all tertiary)"))) %>%
mutate(Scenario_Number = row_number()) %>%
relocate(Scenario_Number, 1)
# When was the dataset last updated?
Hugin_Output_Last_Updated <- file.info("Data/Hugin/Hugin_to_R_datafile.csv")$mtime
hugin_output_light_tall_labelled <- hugin_output_light_tall %>%
left_join(scenario_number_labels, by = c("scenario_number" = "Scenario_Number")) %>%
relocate(county, Year_and_Population_Growth, WWT_Scenario, .after = scenario_number)
# Graphical interpretation
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
coord_flip()
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
geom_text(label = Probability) +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
geom_text(aes(label = Probability)) +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = fct_rev(Risk_Bin))) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
RQ_histogram <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") |>
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_histogram()
RQ_histogram
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col(position = "dodge") +
coord_flip() +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = county, y = Probability, fill = Risk_Bin)) +
geom_col(position = "dodge") +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = Risk_Bin, y = Probability, fill = Risk_Bin)) +
geom_col(position = "dodge") +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name), cols = vars(County)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
WWTP_RQ_bars <- hugin_output_light_tall_labelled %>%
filter(Year_and_Population_Growth == "2050 & Main",
WWT_Scenario == "Current") %>%
distinct() |>
ggplot(aes(x = Risk_Bin, y = Probability, fill = Risk_Bin)) +
geom_col(position = "dodge") +
scale_fill_brewer(palette = "Spectral", name = "RQ Interval", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
facet_grid(rows = vars(API_Name), cols = vars(county)) +
labs(x = "WWT Scenario (2050)") +
theme_bw()
WWTP_RQ_bars
